%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: noc_map.pdf
%%Creator: Adobe Acrobat 15.23.0
%%For: Yuya
%%CreationDate: 2017/03/05, 16:12:51
%%BoundingBox: 0 0 847 852
%%HiResBoundingBox: 0 0 846.6000 851.7601
%%CropBox: 0 0 846.6000 851.7601
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1106 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2017-01-23T20:57:43+09:00"
   xmp:CreateDate="2017-01-23T20:57:42+09:00"
   xmp:MetadataDate="2017-01-23T20:57:43+09:00"
   xmp:CreatorTool="PowerPoint 用 Acrobat PDFMaker 15"
   xmpMM:DocumentID="uuid:5e52d7a3-f9a3-43e0-93ca-3991d71e350c"
   xmpMM:InstanceID="uuid:e7891154-e676-4c68-ac40-73d8d997b6d1"
   dc:format="application/pdf"
   pdf:Producer="Adobe PDF Library 15.0">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint プレゼンテーション</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Yuya MARUYAMA</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -851.76 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 851.76 li
846.6 851.76 li
846.6 0 li
cp
clp
191.76 537.12 mo
234.6 537.12 li
234.6 555 li
191.76 555 li
cp
false sop
.0390936 .0300603 .0300603 0 cmyk
ef
.96 lw
0 lc
0 lj
8 ml
[] 0 dsh
true sadj
191.76 537.12 mo
234.6 537.12 li
234.6 555 li
191.76 555 li
cp
.750271 .679713 .654902 .901946 cmyk
@
%ADOBeginSubsetFont: VPLAAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.313 1.238 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /VPLAAA+Calibri
Type42DictBegin
[<00010000000c000c000c000c4f532f3299c236e8000000cc000000606376
7420b970d8350000012c000005bc6670676df89e5c57000006e800000d30
676c79662cc696bd00010a7c0000218e68656164f50aa7bd000014180000
0036686865610dad1c6a0000145000000024686d7478daeebfe000001474
000064a66c6f636102fb9f640000791c000064ac6d6178702c1b2a5f0000
ddc8000000206e616d651029ca0b0000dde8000007a77072657013672219
0000e590000024eb676469720000000000000000000000000003042b0190
00050008059905330000011e05990533000003d0008602000800020f0502
020204030204e0002affc000247b00000009000000004d53202000400000
feff0600fe0001c4079e0226200001ff0000000003b7050e000000200014
0000079e0000fe930000000000000000000000000050006a007300800080
0086008d009300bf00db006200830093009900a000a600a900b000c100c9
00d700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe79056d000c03b700060013
0000fffaffedfea6ffedfeb8050e000600130000fffaffedfe93050e0013
0420000600130000fffaffedff10ffee050e00130420000600130000fffa
ffeefe93ff10feb80612000a050e0006000d02d2fffafff301fdfffa023f
0006000dff36fffafff302870006000f0000fffafff1079efeaffea70000
0000000000000000000000500051005a005b005c005d0060006100620064
00680069006a006b006c006d006e00680069006e00600067006e00660068
005f00610063006400660068006a006b006c006d006e006f0070006f0072
0074007500760076007000720073007400750076006f0070007100720073
00750077007700780079007a007b007c007d007b007c007d00770079007a
007c0078007a007c007d0078007d007e007f008000810082007e007f0081
0082007e007f008000810082008300840085008600870088008900830084
008500860087008800890083008400850086008700880089008900860087
00880089008a008b008c008d008e008f008a008b008c008d008e008f008a
008b008c008d008e008f008d008a008b008c008d008e008f009000900091
0092009300940095009600980099009b009c009000910092009300940095
0096009700980099009a009e009f00a60090009100950098009f00900091
0096009700bc00c600b500ae00af00b6006800690063006a006f00700071
006f0070007100720066006c006d00700079007c007f0083008600870088
0089008a0074007500760077007a007b007c007d007e008200850086008a
0088008900830078007b00820083008600870088008900760079007a007c
007d007e0083008500880089008a0073007400750077007a007d00880089
008a008b008c008d008e00900094008b008c008d00910092009300940095
008c008d00910095008f009000910092009300940095008b008c008d008e
008f009000910092009300940095008b008c008d008e008f009000910092
00930096009700980099009c0096009700980099009a009b009c00960099
009a009c0096009700980099009a009b009c009700980099009a009b009c
009700980099009a009b009c0096009d00a000a1009d009e009f00a000a1
00a2009d009f00a000a1009f00a2009d009e009f00a000a100a2009d009e
00a000a1009d009e00a000a2009d00a300a400a500a600a700a300a400a6
00a700a300a400a500a600a700a600a300a700a800a900aa00ab00ac00ac
00a800a900aa00ab00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae
00ad00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00ad
00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00af00b0
00b100b200b300b400b500b600b700b800b300ae00af00b000b200b500b6
00b700b800b900ba00bb00bc00be00c000c100c200c200b900ba00bb00bc
00bd00be00bf00c000c100c200c400ba00bb00be00bf00c000c200c300c4
00b900ba00bf00c000c200c600c700c900ca00cb00cc00cf00c500c700ce
00c500c700c800cf00d000d200d300d7010d00d000d100e900d000fd00d0
05e4000e0041000005ba009c009c005e005e000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000051a001500a0fff8ff77
fff803480066015401cc00ac00a200b4008c0101006e0000000000000000
0000011f000a04e2001400b4fff6035c00140028fdda0568fea2ffef405a
868574737271706f6e6d6c6b6a696867666564625f5e5d5c5b5a59585554
535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a39383736
352f2e2d2c2826252423221f181411100f0d0b0a09080706050403020100
2c4523466020b02660b004262348482d2c452346236120b02661b0042623
48482d2c45234660b0206120b04660b004262348482d2c4523462361b020
6020b02661b02061b004262348482d2c45234660b0406120b06660b00426
2348482d2c4523462361b0406020b02661b04061b004262348482d2c0110
203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed
51582320b04d44235920b0042651582320b00d44235921212d2c20204518
684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c00
b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228453ab102
00080d2d2c2045b00325456164b050515845441b2121592d2c2045b00043
60442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb8
100062602b0c642364615c58b00361592d2c8a03458a8a87b0112bb02923
44b0297ae4182d2c4565b02c234445b02b23442d2c4b525845441b212159
2d2c01b005251023208af500b0016023edec2d2c01b005251023208af500
b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d
2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c6423648b
b84000622d2c21b08051580c6423648bb82000621bb200402f2b59b00260
2d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c64
23648bb84000626023212d2c4523456023456023456023766818b0806220
2d2cb00426b00426b00425b0042545234520b003266062636820b0032661
658a2344442d2c2045b0005458b040442045b04061441b2121592d2c45b1
302f4523456160b0016069442d2c4b5158b02f2370b01423421b2121592d
2c4b515820b0032545695358441b2121591b2121592d2c45b01443b00060
63b0016069442d2cb02f45442d2c452320458a60442d2c45234560442d2c
4b235158b90033ffe0b134201bb3330034005944442d2cb0164358b00326
458a586466b01f601b64b020606620581b21b04059b001615923586559b0
2923442310b029e01b2121212121592d2cb0164358b004254564b0206066
20581b21b04059b0016123586559b0292344b00425b00725082058021b03
59b0052510b004252046b0042523423cb0072510b006252046b00425b001
6023423c2058011b0059b0052510b00425b029e0b0072510b00625b029e0
b00425b00725082058021b0359b00425b003254348b00625b00325b00160
43481b2159212121212121212d2cb0164358b004254564b020606620581b
21b04059b0016123581b6559b0292344b00525b00825082058021b0359b0
042510b005252046b0042523423cb00425b0072508b0072510b006252046
b00425b0016023423c2058011b0059b0042510b00525b029e0b029204565
44b0072510b00625b029e0b00525b00825082058021b0359b00525b00325
4348b00425b0072508b00625b00325b0016043481b215921212121212121
2d2c02b00425202046b004252342b0052508b003254548212121212d2c02
b0032520b0042508b0022543482121212d2c452320451820b00050205823
652359236820b040505821b04059235865598a60442d2c4b53234b515a58
20458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b51
5a58381b2121592d2cb000214b5458381b2121592d2cb002435458b0462b
1b21212121592d2cb002435458b0472b1b212121592d2cb002435458b048
2b1b21212121592d2cb002435458b0492b1b212121592d2c2320b000508a
8a64b10003255458b0401bb10103255458b005438b59b04f2b5923b0622b
2321235865592d2cb108000c215460432d2c014623466023466123201020
468a61b8ff80628ab140408a704560683a2d2c208a2349648a2353583c1b
21592d2c4b52587d1b7a592d2cb012004b014b54422d2cb1020042b12301
8851b1400188535a58b910000020885458b202010243604259b124018851
58b920000040885458b2020202436042b12401885458b202200243604200
4b014b5258b2020802436042591bb940000080885458b202040243604259
b94000008063b80100885458b202080243604259b94000010063b8020088
5458b202100243604259b12601885158b94000020063b80400885458b202
400243604259b94000040063b80800885458b202800243604259b1280188
5158b94000080063b81000885458ba000201000002436042595959595959
59b10002435458400a0540084009400c020d021bb10102435458b2054008
ba010000090100b30c010d011bb18002435258b2054008b80180b109401b
b901000002435258b2054008ba0180000901401bb901800002435258b205
4008b80200b109401bb2054008ba010000090100595959b9400000808855
b94000020063b8040088555a58b30c000d011bb30c000d01595959424242
42422d2c451868234b51582320452064b04050587c59688a6059442d2cb0
0016b00225b0022501b001233e00b002233eb10102060cb00a236542b00b
234201b001233f00b002233fb10102060cb006236542b0072342b0011601
2d2c20b82000628a6023622d2cb0072558001b0159b0042510b00325b002
2520b8ffff545821cd1bed5921b006255cb006255a58b0092b5920b00525
4ab0042547b004254760b0062547b0806361b00225b0005558b00325b007
25496359b0082558001b0159b00425b0062549b009255cb009255a58b009
2b59b0072546b0806361b0032520b0005558631b2159612320b0005558b0
80631b21b08059b0592bb006255c586959b00425202010b00048233ab006
2658001b0159b0052658b003252f598a12233221212d2cb00625b00a2587
b00625b009254ab0005358b00625b00a251bb00925b0072559b00225b002
25070cb005256323b00625636020b94000040063535821b00426b00426b0
0a1bb94000040063655158b0042665b0042665b00a1bb00426b00426b000
b00325b003250b0d0ab0092eb00725b007250b0d0ab00b2eb00525b00525
07595920b0005558b00525b0052587b00725b007250bb0092510b00b25b0
092620b8ffff545821cd1bed59b00525b0052507b00825b00b254923b006
25b0062587b00a2510b00b25c15920b00051b800522378b00161b00225b0
0725b0072507b00a25b00d254961b08062b00525b005250bb00a252338b0
0625b0062587b00825b008250bb00a2510b00b25c4b00625b0062507b009
25b00c2549b0032554b8ffa723792121212121212121212121212d2c23b0
005458b9400000001bb900004000598ab0005458b9400000001bb9000040
0059b05b2b2d2c08b0005458b9400000001bb900004000590db05b2b2d2c
8a8a080d8ab0005458b9400000001bb90000400059b05b2b2d2cb00426b0
0426080db00426b00426080db05b2b2d2cb0022563b0206066b00225b820
00626023622d2c204569442d2c234ab1024e2b2d2c234ab1014e2b2d2c23
8a4a234564b0022564b002256164b00343525821206459b1024e2b23b000
505865592d2c238a4a234564b0022564b002256164b00343525821206459
b1014e2b23b000505865592d2c20b003254ab1024e2b8a103b2d2c20b003
254ab1014e2b8a103b2d2cb00325b003258ab0672b8a103b2d2cb00325b0
03258ab0682b8a103b2d2cb0032546b003254660b004252eb00425b00425
b0042620b000505821b06a1bb06c592bb0032546b00325466061b0806220
8a2010233a232010233a2d2cb0032547b003254760b0052547b0806361b0
0225b00625496323b005254ab080632058621b2159b0042646608a468a46
60b02063612d2cb00426b00425b00425b00426b06e2b208a2010233a2320
10233a2d2c2320b001545821b00225b1024e2bb0805020605920606020b0
01515821211b20b005515821206661b0402361b100032550b00325b00325
505a5820b00325618a535821b000591b21591bb00754582066616523211b
2121b000595959b1024e2b2d2cb00225b004254ab0005358b0001b8a8a23
8ab00159b004254620666120b00526b0062649b00526b00526b0702b2361
65b02060206661b02061652d2cb0022546208a20b000505821b1024e2b1b
452321596165b00225103b2d2cb0042620b802006220b80200638a236120
b05d602bb00525118a128a20398a58ba005d10000004266356602b232120
10204620b1024e2b23611b2321208a201049b1024e2b593b2d2cba005d10
000009256356602bb00525b00525b00526b06d2bb15d0725602bb00525b0
0525b00525b00525b06f2bba005d10000008266356602b20b0005258b050
2bb00525b00525b00725b00725b00525b0712bb0021738b00052b00225b0
01525a58b00425b0062549b00325b00525496020b0405258211bb0005258
20b0025458b00425b00425b00725b0072549b00217381bb00425b00425b0
0425b0062549b0021738595959595921212121212d2cb12501885058b940
00020063b8040088545cb0154b525b1bb001592d2cb12801885158b94000
040063b8080088545c1bb001592d0001000000062e1472e59e735f0f3cf5
0019080000000000bbeb7ccc00000000d406b228fbfafd8009ec08360000
00090002000100000000000100000600fe0001c40aa0fbfafaa009ec0001
00000000000000000000000000001929040e0000000000000000000001cf
000004a1002304a1002304a1002304a1002304a1002304a1002304a10023
04a1002304a1002304a1002304a10023061bffcc061bffcc045a00ac0444
0061044400610444006104440061044400610444006104ec00ac04ec0097
04ff001b04ff001b03e800ac03e8004503e800ac03e8004603e8004603e8
006303e8005f03e8008103e800ac03e800ac03ad00ac050c005b050c005b
050c005b050c005b050c005b04fc00ac04fc00ac05400020020400ac0204
ff4a020400280204ff390204ff310204ff500204ff4f0204ff7b0204001e
02040027049200ac028d0007028dffa9042800ac042800ac035d00ac035d
0081036200ac035d00ac0370001c045e00ac06d700ac052a00ac052a00ac
052a00ac052a00ac052a00ac050700ac054c0063054c0063054c0063054c
0063054c0063054c0063054c0063054c0063054c0063054f0063054f0063
06ef0063042200ac042200ac05620063045800ac045800ac045800530458
00ac03ad004703ad004703ad001503ad001803ad004703ad004703e6000f
03e6000f03e6000f03e6000f052200aa052200aa052200aa052200aa0522
00aa052200aa052200aa052200aa052200aa052200aa052200aa048a0022
071e003d071e003d071e003d071e003d071e003d0427003003e6001e03e6
001e03e6001e03e6001e03e6001e03bf003b03bf003b03bf001a03bf003b
03f4001003f4001003f4001003f4001003f4001003f4001003f4001003f4
001003f4001003f4001003f40010055cffe2055cffe2040400a103cb006d
03cb006d03cb006d03cb006d03cb006d03cb006d046500a10465006a0477
003204770032038000a103800030038000a103800020038000200380002c
0380002903800042038000a1038000a1035000a10482006c0482006c0482
006c0482006c0482006c047800a10478008c049d004001ec00a101ecff58
01ec001901ecff4801ecff2701ecff5501ecff5201ecff7101ec001101ec
0018041b00a1023e0000023eff8c03c900a103c900a102e000a102e00087
02e600a102e000a102f0003203d500a1060600a1049100a1049100a10491
009904910078049100a1046600a104aa006604aa006604aa006604aa0066
04aa006604aa006604aa006604aa006604aa006604ba006604ba00660606
006603c500a103c500a104b1006603ed00a103ed00a103ed004503ed00a1
034f0049034f0049034ffff5034ffff6034f0049034f00490359001c0359
fffe0359001c0359001c048d009f048d009c048d009f048d0097048d0075
048d009f048d009f048d009f048d009f048d009f048d009f03fd0021063e
0037063e0037063e0037063e0037063e003703cc00360383001003830010
0383001003830010038300100369004403690044036900080369004403d5
005c03d5005c03d5005c03d5005c03d5001e03d5005c03d5005c03d5005c
03d5005c03d5005c03d5005c062f005c062f005c043400990362005a0362
005a0362004e036200570362005a0362005a076f005a06dd005a0601005a
0601005a04340060048c0060046a00600434006103fb005d03fb005d03fb
005d03fb005d03fb005d03fb005d03fb005d03fb005d03fb005d03fb005d
02710025069a002508d5002504ab0025069b002508d50025043c0025043c
0025043c0025043c0025044f0025044f0025044f0025044f0025043c0025
043c00250676002506760025067600250676002506890025068900250689
0025068900250676002506760025043c0025043c00250676002506090025
08430025043c0025043c002504830025043c00250676002504ed002504ed
0025051300250728002503c4003503c4003503c4003503c4003503c40035
0434006004340060043400600434006004340060043400990434ffad0443
fff901d6008501d6ff6e01d6000f01d6ff5a01d6ff2001d6ff7201d6ff58
01d6ff6701d6001101d6009903c00085041e008801eaffd501eaffd501ea
ff6303a3009903a3009903a3009901d6009901d6002a021c009901d6004b
01fb001c02fd0099066400990434009904340099043400990434004e0434
009904a2ff9d043400990438005a0438005a0438005a0438005a0438004f
0438005a0438005a0438005a0438005a043c005a043c005a06cc005a0434
0099043400990434006002ca009902ca009902cafff902ca006e03210051
032100510321fffe0321fffd032100510321005105ae005105ae00510438
009901f1009902ae002102c4002102ae002102bc002604e6002104750021
047500210475002104750021047500210475002104750021047500210475
00210475002105130021074b002106d9002106d9002106d9002106d90021
06d9002106d9002106d9002106d9002106d9002106d90021043400940434
008e04340094043400860434004d04340089043400860434009404340094
0434009404340094039d002205b8003505b8003505b8003505b8003505b8
003503770029039f0022039f0022039f0022039f0022039f002203290059
03290059032900070329005903380072036100640378005d02ac004402e5
006c024e004402e5004802b8004701c100240297002a02e9006c01630061
016dffd80297006c015e006c0456006c02e6006c02e6004502e5006c02e5
004801f6006c0230004201e3002302e9006c0285001f03ef002c027e0028
0286001f023700420254000002750000029400000000fd080000fce80256
000002750000029400000000fd080000fce803290000035f000003940000
0000fc9f0000fc6703290000035f0000039400000000fc9d0000fc6901ff
0000039a000003a2000003a800000000fc650000fc600324000002f50000
03460000036700000000fca00000fc7e0327000003490000036a00000000
fc9d0000fc7d030c0000030f0000031100000000fcac0000fca902910000
0298000002a000000000fce90000fce202cf000002c2000002b5000003c1
000003e10000040000000000fc520000fc3101ce000001d6000001ce0000
01ce00000000fd4d0000fd4d027500840000fd7a027f00840000fd7601f7
00840231000004a1002304a1ff89045a00ac035300ac0484003a03e800ac
03e8fec703bf003b04fc00ac04fcfe9e054c0063020400ac0204feb20204
ff52042800ac0495002406d700ac052a00ac03ef0053054c0063054cff16
04fc00ac042200ac03ab004603e6000f03e6001e03e6fe6e03e6001e0613
000004270030060000900550005e0550fef903f4001003f40010040400a1
02fb00a103c90023038000a1038000a103690044047800a1047800a104b4
006601ec00a101ec000001ecff5403c900a103e10011060600a1049100a1
0387005e04aa006604aa0066047800a103c500a1035b004b0359001c0383
001003830010038300100552000003cc00360558008704b1006604b10066
048a0061048a00610440009904320064039200180430000003a5005903a5
005902c8004e044c0099044c00990441006004780006023200940232ffec
0232ff7a0232ff0f03a3009903b4000004660099039700220302004d0303
004d0438005a0438005a046c002804120076044100590349005c03190003
04550090045500900455007d0455001605360055053b00550369001205a9
00940592006405920064028900000000fd0a03f400000000fc3602050097
02050097020500970224004801ff006e01ff006e04a10023044d00ad045a
00ac037000ac037000ac037600ac0527000303e800ac03e8004503e80061
0668005503ca004b052200ac052200ac052200ac020400ac0204ff50028d
0007045800ac045800ac04e3000306fa000306d700ac04fc00ac070300ac
054c0063054c006304f900ac042200ac0444006103ad004703e6000f0438
000f0438000f04b800220594000004270030051c00ac04f500ac04720074
06f200ac071e00ac04eb000f061800ac044000ac0462005d046100620708
00ac0471005304ff000f04f2000f0504000003f4001003ee00a2040400a1
031400a1031400a1032700a10480000e038000a1038000300380002c0578
004403800057048900a1048900960489009501ec00a101ecff55023e0000
03ca00a103ca00a104320001060600a1047800a104aa006604a90066046a
00a103c500a103cb006d034f00490359001c039d001e039d001b042f0022
050a000003cc0036048e00a1046900a103fa006d062300a1064500a1045f
0017058300a103e800a103e4006b03f00066063200a103ff005c045f001f
0463001f044d000006010001063200a103d5005c044300000430000003d5
009902c4009902c4009902d5009901d6ff58047700170434006003fb005d
03fb005d03fb005d0583003e0362004b04530099045300780453008801d6
008501d6ff7201eaffd503b6009903b6009904150016060200130569005f
04470099062800990438005a0431005a042a009904340086043400990362
005a032100510319000a06640099039f0022039f001803d2002204fe0051
03770029045500990433009903c0004205d4009905fe0099044a000a0554
009903c20099038b004d038d005d05c6009903cb00380453fff90443fff9
04270018036e0000036e0000036e00000000fca50000fca5029b010a029b
00bf029b00bf03b5008503b5005e03b5005e03de0064026000ed026000b1
0364007a0361005f01ff002a02240048022400bb020500970586009601ff
008c01ff002a01ff008c01ff002a035900880359002b035900880359002b
01ff002a0359002b02b6007402b600c002b6007402b600c0041900750419
00ad04190075041900ad0317000102df001f03af018a03fc01ae0317000b
02df002d027300450273004503fcfff603fcfff6073e0095073e0095073e
0095073e009503fcfff903fc00c10205009702050097026d0085026d007a
027400bf0274005a0284005602840075024000840240007a024a00b0024a
0067026d0085026d007a027400bf0274005a028400560284007503fc009e
03fc007703fc007803fc007604b0006b043d006e03fc006a03fc003d01c4
008b0335008b057500000556000007f7000007270000073c000007270000
06ad00af06ad00af040e008005a4003f05ac004d02b6000003fc003f04b3
0049040e002a03fc0057040e00600434005803fc00b903fc004a040e0053
03fc006d0419002b040e003403f30035039f006103be005f039f0058039f
002506210049083300ac03fc002406e300a10411001d0494005f02cb0023
03ec006203ec00510455002203d700510436007e03b20035043600630436
005c040e0048040e00ae040e0072040e0067040e0020040e0065040e006b
040e0063040e0052040e005204430067028d00190381005c0373005903ac
00260368006103b7006e0349002f03b5004b03bc0052039f0050039f008d
039f0065039f0062039f003a039f0067039f0061039f005e039f0051039f
00500494005f02cb002303ec006203ec00510428002203d700510436007e
03b20035043600630436005c040e0048040e00ae040e0072040e0067040e
0030040e0065040e006b040e0063040e0052040e00520321004801f80023
02b0004b02ad004102db002502a6004502df005b0291003202e1004b02df
004402ea005102df005102d0005701bc006001bc00580321004801f80023
02b0004b02ad004102db002502a6004502df005b0291003202e1004b02df
004402ea005102df005102d0005701bc006001bc0058029d003801f50031
0252003c0249002d024a001402460032025100300238002202570025024d
0023029d003801f500310252003c0249002d024a00140246003202510030
0238002202570025024d002302b1ff4b03130044055f0044056900440517
004405690044052e00440553004405c9004e05c9004e0567004705b70047
05a2004705cd0027057d004505a20045052a003505b80048084e0048057d
005c07c9005c03fc004603fc004c03fc006003fc002b03fc005e03fc0060
03fc005903fc004503fc006503fc004c03fc005503fc005603fc003d05e9
002c0405003506d300690443006102ed000703fc00080484003a0550005e
04660099066500660454005b0416004a073e009a073e0096073e00c9073e
00c9070e00af070e013a070e00af070e013a0a4e009a0638009f04660028
018a000001da000004660000046600000466000004660000046600000466
000004660000046600000466000004660000046600000466000004660000
046600000466000004660000046601d004a1002304a1002304a1002304a1
001904a1001504a1001d04a1002304a1001c04a1001c04a1001c04a1001d
04a1002303e800ac03e800ac03e8003703e8ffe803e8ffe903e8ffe803e8
ffe803e8003702040015020400a0054c0063054c0063054c0063054c0063
054c0063054c0063054c0063059400630594006305940063059400630594
006305940063052200aa052200aa05c600aa05c600aa05c600aa05c600aa
05c600aa05c600aa03e6001e03e6001e03e6001e03d5005c03d5005c03d5
ffbb03d5ffb103d5ffb803d5ffb803d5005703d5ffb803d5ffb803d5ffb8
03d5ffb803d5005c03fb005d03fb005d03fb003003fbffdb03fbffdb03fb
ffd903fbffcb03fb005d01d6002601d600850438005a0438005a0438ffe8
0438ffea0438ffe80438ffea0438005a04a0005a04a0005a04a0005a04a0
005a04a0004904a0005a043400940434009404d2009404d2009404d2008c
04d2009404d2004604d20094039f0022039f0002039f0022046a00530466
003803f4001003f4001003f4ffbd03f4ffc003f4ffbd03f4ffc803f40010
03f4ffc803f4ffc803f4ffc803f4ffc803f40010038000a1038000a10380
fff00380ffa70380ffa00380ffa20380ff8e0380001101ec000901ec0094
04aa006604aa006604aa002104aa002204aa002104aa002204aa006604ec
006604ec006604ec006604ec006604ec006604ec0066048d009f048d009f
0515009f0515009f0515009a0515009f051500750515009f038300100383
fff10383001001da00000466000004660000046600000466000004660000
04660000046600000466000004c10066052400ac052400ac050600ac0493
00a1049300a1047c00a103e6000f02ae00210359001c01d60011043c0025
043c0025043c002506760025067600250676002502f5001c02e7008e0306
005a034b008e02a8008e028c008e0344005a035b008e01a6008e01cb0005
02e0008e025b008e046d008e0375008d0375005a02d8008e0375005a029b
005702800046025700040314005702e3001a0445002202b5001c028b001c
02b800500000fdfd0000fdfd0466ffff0466ffff0466ffff0466ffff03c1
ffff03c10000030cffff030c0000030cffff030c00020231000002310000
01ffffff01ffffff01ffffff01ffffff0000fd090000fd0902aa008202aa
008202aa009802aa009801ce008402aa008202aa008202aa008202aa0082
027f008e027f008e0324000002910084046601fd02aa001402aa00130329
000003290000032900000329ffff039a00000327000003fcfff903fcfff9
039a0000039a00000000ff080000fe4c0000fdfb0000fdfb0000fe3f0000
fe3f0000fdc20000fdc201ce008402aa00140291008302aa001502aa0093
02aa0093039a014c039a00000000fdfd0000fdfd0000fd090000fce90000
fd090000feb702aa001402aa001403fcfff90466ffff02aa0098039a0000
039a0000039a0000039a0000039a0000039a000004010014040101470000
000002aaffff02aaffff01ceffff01ceffff030c0000030c000002aa0093
02aa00c802aa00c803f100c801ceffff01ceffff01ce000001ce000002aa
00a003b1008402aaffff02aaffff075c003c075cffff075cffff075cffff
075cffff075c003f06d0ffff06d0ffff075c0003075c0003075c004001df
003001df003001e7003201e7003200f8004400f800440207003002070030
0209004c0209004c019d0030019d003002070032020700320209004c0209
004c0309004c0309004c015f004c015f004c015200180152001801c30016
01c3001601bf001c01bf001c032700510327005103270051032700510000
ffab03bdffff041a0000041a00000416000104160001041a0001041a0001
041a0001041a000104010002040100020401000204010002015f004c02aa
00c801ce00c803f100c804ec000f044d00ad0440001e0462005d049d0061
04ff001b057e000f044d004c03e8006c0525006403ca005a03adffd6050e
005b048a001c025000ac0226001b042800ac070900aa052affd6054c0063
062f006104e4000f045800ac03ad004703ab0046043f000f03e6000f0550
005e052200aa0442001e03bf003b03ca004b03ca005a040e006808ab00ac
081500ac060300ac054700ac07b700ac071400ac04a100230204ff3a054c
0063052200aa052200aa052200aa052200aa052200aa04a1002304a10023
061bffcc050c005b050c005b04280073054c0063054c006303ca00080895
00ac081500ac050c005b072800ac04d400ac052a00ac04a1ffef04a10023
03e8ffe103e8006e0204feac0204ff4c054c003b054c00630458ffbf0458
006e0522002f052200aa03ca004b04fc00ac052400ac040e004d03ef003b
04a1002303e800ac054c0063054c0063054c0063054c006303e6001e04a1
ffd90444ffe7035d001b03e6ffb803940064046b001b0545001b04950024
03e8ff9e02a10007050a00630469001a04a0001b04a10023045a00ac045a
00ac045a00990444006104ec00ac04ec00ac04ec00ac04ec00ac04ec00ac
03e8008403e8008403e8008203e8003403e8008103ad00ac050c005b04fc
00ac04fc00ac04fc00ac04fc002804fc00ac0204ff360204ff71042800ac
042800ac042800a0035d00ac035d0035035d0060035d006606d700ac06d7
00ac06d700ac052a00ac052a00ac052a00ac052a00ac054c0063054c0063
054c0063054c0063042200ac042200ac045800ac045800ac045800770458
00ac03ad004703ad004703ad004703ad004703ad004703e6000f03e6000f
03e6000f03e6000f052200aa052200aa052200aa052200aa052200aa048a
0022048a0022071e003d071e003d042700300427003003e6001e03bf0015
03bf003b03bf003b035d001b03c2ff9b0433001b045800ac052400ac0471
00ac03e2003b0444003803ad005903b500ac046a00270434009904340004
03b3005a043400600430005d0271ffee064300990434009903a300990241
002703b40014044c0099053e0059043400990321005102e0002102ae0021
03fc001b0329005903ca004b0366003a03680050075d006003c00099061e
009903d5005601d6ff570438005a0434007a043400880434008804340088
0434008803fb006203d5005803d50058062f005c044cffe203c4003503a3
003a0438005a0438005a03ca002e01eaff60075d006003c4003504340099
03d5ffbf03d5005c03fbffe203fb005d01d6fece01d6ff650438ffed0438
005a02caff7302ca00100434ffff0434008703ca004b0434005104cd0060
040e0052034c005903d5005c03fb005d0438005a0438004f0438005a0438
005a039f00220289009804eb009902ae002106930060069200600362fff0
03210051032900590394006403fb003c0240fff70240fff70434006002ff
002703e2002203720049040e00720321005101f300ad032900ad049700ac
029b010a03d5005c0434009904340099043400860362005a043400600434
006004340060043400600434006003fb005d03fb005d03fb005d03fb0050
03fb005d0271002503c40035043400990434009904340067043400130434
009401d6ff1e01d6ff1e01d6ff5a03a3009903a3009903a3006b01d60089
01d6ff5801d6ff5801d6ff59066400990664009906640099043400990434
009904340086043400860438004f0438004f0438005a0438005a04340099
0434009902ca009902ca008a02ca000a02caffff03210051032100510321
0051032100030321005102ae002102ae002102aeffd202aeffd204340089
043400550434007b0434004d04340086039d0001039d002205b8003505b8
00350377002903770029039f002203290001032900590329000004340086
02aeffc605b80035039f002203d5005c01f100530241002703d5002902ae
ff960463009903db00990344005903c200360362003b02ee003c03190099
053b00550471000803ee00a203ee001403cb004803fc006d0477003204d3
000803ee00530380007204a40066038a00680350ffe80482006c03f30013
0232008e01ecfffe03c900a1063200910491ffe804aa00660592006e0433
000803ed00a1034f0053035b004b038300080359001c04b10066048d009f
03b7001003690044039000570393006b0398005507ce00a1085500ac055a
00a105cd00ac06cf00a1076800ac03f4001001ecff4704aa0066048d0096
048d009f048d009f048d009f048d009f03f4001003f40010055cffe20482
006c0482006c03c9005204aa006604aa00660390000007ce00a1085500ac
0482006c065500a1046200a0049100a103f4ffc503f400100380ffb10380
004d01ecfed001ecff7004aa001d04aa006603edffa403ed0064048d0000
048d009f039000570478008c049300a103c50057038c004403f400100380
00a104aa006604aa006604aa006604aa00660383001003f4001003cb0024
02e000270359ffeb0339005004040027048d002703fd00210380ffff023e
0000048b006603ed00270383000c039000550339005001f300ac032900ac
049700ac026000ed03f40010040400a1040400a10404006e03cb006d0465
00a1046500a104650081046500a1046500950380002a0380002603800041
038000000380004a035000a10482006c047800a1047800a10478009a0478
0020047800a101ecff2a01ecff5503c900a103c900a103c9007e02e000a1
02e0000002e0002802e00024060600a1060600a1060600a1049100a10491
00a1049100a1049100a104aa006604aa006604aa006604aa006603c500a1
03c500a103ed00a103ed00a103ed003e03ed0091034f0049034f0049034f
0049034f0000034f00490359001c0359001c0359001803590019048d009f
048d0079048d009f048d0075048d009f03fd002103fd0021063e0037063e
003703cc003603cc003603830010036900050369004403690020047800a1
0359000a063e00370383001003f4001002e00027035effa703c5002703ed
00a104b600a103ef00a10369004403cb004803500060039900a1043c0025
043c00250447002504470025043c0025043c0025044f0025043c0025043c
002506760025067600250682002506820025067600250676002506890025
067600250676002504750021047500210475002104750021047500210475
002104750021047500210475002106d9002106d9002106d9002106d90021
06d9002106d9002106d9002106d9002106d9002103d50096043400600434
0099043400990362003b039b005a043400600434006003fb006203fb0062
051b00650362005a0362004b0435004b043b005d0241fff7043400600434
00600451005a039d001f03d0001e04330094043400990434009902410027
01d6fff3023200940267002102e7ffa702f9002701d60099048600990663
009406630094066400990434ffc204340099045300990438005a05b3005a
059200640536005502ca002302ca002302ca002302ca009902ca0099028e
0094028e002303980085039800850321005101eaffd50242fff801eaffd5
028affc402ae004102ae002104a400270476004904550090039d002205b8
0035039f00220351001f0329005903d3005903bc004b03bb005603940064
0394005e039400640362005a0507005f03d50099043b005a046b005a0447
0099028affc403a300270319009904340060039400640394005e066f0060
06d400600719006004f3002103c40021057a0021060c002504ae00990469
009903ef002c03ef00700434ffd5044dffd503d60010050fffe3062f0062
0412002703cb006a0444009904590030033f0099036f005501d600850227
00000391009802f000300569005f045300990474005a03cb006304a90066
04a800660528001406cc00560368003a0438005a0438005a03a8009903cf
005203cf0052033f001b046a009a0465004b05c7004b0664014c03de0020
060e0035034f0042032f00380321005103d0001e02f2009903de00200450
009903a80099052f0083040e000102f5001c03f1000002e7008e02fb0027
034b008e02a8008e02a800500344005a035b008e01a6008e01cb000502e0
008e025b008e046d008e0375008d0375008d0375005a02b2004802d8008e
029b005702570004031400570445002202ac004402ac006c02e50048042b
004402e5006c02e5004802b8004702b8004702770046027700460297002a
016300610297006c0456006c02e6006c02e60045024e003602e6004502e6
004502e5006c01e3002302e9006c02db00460456006c0285001f024a000d
02be006c024600230283002803650055025f00180163006101f6006c02e9
006c0285001f02be006c0246002302e5006c03650050025f001806940094
04bbffa704bd0060030affa7069cffe504b4002204beffa70352ffa7031a
ffa7039d0014030fffa70329ffc203c4003b0304006e03c4003506880021
02410027026900270468002704db002704c4002704340099045100600271
0025054c0060041e009901f0006b067f0099045100990434009902ca006a
037b005102faffd5039d002203ed0029033c0059047c005c04d800600434
006003fb005d0362005a0362004b03fb006201d600850362003b0233001e
04d800940376004b02e5006b024e0044026e004402b200440277004201c1
002401c100070297002a02e9006c0192000001aa006c0163006d01920000
01e500000194006c017b00530224006e0456006c0456006c031b0000031c
006c0304006e02e600450336004502300042016dffd801e4002302e90000
02b8002c02e6006e02e6006e0285001f023700420294004202a600420272
003c02e6004502e9006c02e9006c016dffd801f6006c01f6002502030025
028b006c03ef002c0286001f01c400540334005401ff008c01ff002a01ff
008c01ce008401ce0084029900650299006c03fc004503fc0065044b0044
044b0044025100f20256000002540000025100f203270000025400000256
0000023900980239009801ce008401ce008402aa008202aa008202aa0082
02aa008202aa004b02aa009302610024015e006c02300042027e00280299
006c03100096031000960310009603100096031000960457009604570096
045700960457009603100043045700430457004304570043045700430457
0043045700430457002f0457002f0457002f0457002f0457002f0310002f
04570025045700250457002504570025045700250310001a0457001a0457
001a0457001a0457001a0457001a03100042045700420457004204570042
045700420457004204570096045700960457009604570096031000420457
004204570042045700420457004204570042045700420457002f0457002f
0457002f0457002f0457002f0310002f0457002f0457002f0457002f0457
002f0457002f031000260457002604570026045700260457002604570026
031000420457004204570042045700420457004204570042045700960457
009604570096045700960310004204570042045700420457004204570042
045700420310002604570026045700260457002604570026045700260310
002304570023045700230457002304570023045700230310002f0457002f
0457002f0457002f0457002f0457002f0310004b0457004b0457004b0457
004b0457004b0457004b0457009604570096045700960457009603100042
04570042045700420457004204570042045700420310001a0457001a0457
001a0457001a0457001a0457001a03100024045700240457002404570024
04570024045700240310002f0457002f0457002f0457002f0457002f0457
002f0310004e0457004e0457004e0457004e0457004e0457004e04570096
04570096045700960457009602aa006202aa006203290000049a00000359
002b02aa008502aa008502aa00c802aa00c8029100840254000003c1ffff
03c10000039a0000022400bb02aa009802aa009802aa009802aa00980440
fff60440fff60302009803270000032700000324000002aa0000071200d4
071200d402ac004402b8004702e60045027e002802b8004701d9ffff01d9
ffff01d9000001d90000028900000289000002890000028900000000fc66
0000fc660329000003290000032900000329000003240000032400000329
0000032900000329000003290000032400000324000003f4000003f40000
03f4000003f40000032400000324000003270000030c000001ffffff01d9
000003270000032900000329000003290000046600000466000004660000
0466000003f4000003f4000003f4000003f40000023200b6023200b6054c
00630444006104440043044400610444004303e6000e0456fec803e6000e
03ad00ac054c0063045d001e059700ac04a2000f04440061042200ac0432
00640375005a037500420478000604d70051068400140412007604120003
0362005a0362003b0362005a0362003b053b0055037800940438005a0399
001404c5009904a2000f0349005c01eaffd50476ffd504d7005104a90066
03cb006d03cb004803cb006d03cb00480389001a0389fe6f0389001a0350
00a104b1005b03e2001e050000a1045d002a03db006d03c500a104a1ffc5
04a1fe8a04a1fe6204a1ff2204a1ffc604a1fe8b04a1fe6204a1ff2204a1
ff8004a1ff5804a1002304a1002304a1002304a1ffc504a1fe8a04a1fe62
04a1ff2204a1ffc604a1fe8b04a1fe6204a1ff22066500230665ffc50665
fe8a0665fe620665ff220665ffc60665fe8b0665fe620665ff2203e8fef0
04bdfe8204bdfe7a03e8fef004c1fe8604bdfe7a03e8fea403e8fe9504fc
fef005d1fe8205d1fe7a0559feaa04fcfef005d1fe8205d1fe7a0559feaa
04fcfea404fcfe9504fc00ac04fcfef005d1fe8205d1fe7a0559feaa04fc
fef005d1fe8205d1fe7a0559feaa06c000ac06c0fef00795fe820795fe7a
071dfeaa06c0fef00795fe820795fe7a071dfeaa0204fef002d9fe8202d9
fe7a0261feaa0204fef002d9fe8202d9fe7a0261feaa0204fea40204fe95
0204ff4e0204ff7a054cff0605f5fe82060cfe7b054cff0605f2fe7f0605
fe74054cfecf054cfeac0422fef003e6fe940517fe820513fe7e049ffeaa
03e6fe4703e6fe4703e6001e03e6001e0550ff0605f2fe7b060dfe780599
feaa0550ff0605f2fe7b0611fe7c0599feaa0550fecf0550feac0550005e
0550ff0605f2fe7b060dfe780599feaa0550ff0605f2fe7b0611fe7c0599
feaa0714005e0714ff0607b6fe7b07d1fe78075dfeaa0714ff0607b6fe7b
07d5fe7c075dfeaa048a0061048a0061048a0061048a0061048a0061048a
0061048a0061048a0061048a0061048a0061048a005a048a0061048a0061
048a0061048a0061048a0061048a0061048a0061048a0061048a0061048a
0061048a0061048a0061048a0061048a005a03a5005903a5005903a5004f
03a5005903a5005203a5005203a5005903a50059044c0099044c0092044c
008f044c0094044c0099044c0092044c0092044c0094044c0099044c0099
044c0059044c0099044c0099044c0092044c008f044c0094044c0099044c
0092044c0092044c0094044c0099044c0099044c0059023200010232ff86
0232ff830232ff62023200000232ff860232ff860232ff600232ff100232
fecf0232ff600232ffef0232ff7b0232ff290232ff690232ff680438005a
0438005a0438005a0438005a0438005a0438005a0438005a0438005a0412
007604120076045500900455008204550082045500840455009004550082
045500820455008404550012045500100455008004550090045500900455
0041045500710455007d0592006405920064059200640592006405920064
059200640592006405920064059200640592006405920064059200640592
006405920064059200640592006405920064059200640592006405920064
05920064059200640592006403f4001003f4001003f4001003f4001003f4
001003f4001003f4001003f4001003f4001003f4001003f4001003f40010
03f4001003f4001003f4001003f4001003f4001003f4001003f4001003f4
001003f4001003f4001005b9001005b9001005b9001005b9001005b90010
05b9001005b9001005b9001005b90010038000a103800049038000490380
00a10380004903800049038000a10380007b047800a1047800a1047800a1
047800a1047800a1047800a1047800a1047800a1047800a1047800a10478
006f047800a1047800a1047800a1047800a1047800a1047800a1047800a1
047800a1047800a1063c00a1063c00a1063c00a1063c00a1063c00a1063c
00a1063c00a1063c00a1063c00a101ec000901ecff6201ecff6201ecff65
01ec000901ecff6201ecff6201ecff6501ecff1001ecfee901ecff6401ec
000001ecff8c01ecff2a01ecff5301ecff7004aa006604aa006604aa0066
04aa006604aa006604aa006604aa006604aa006603c500a103c500a10383
00100389001a038300100389001a038300100389001a038300100389001a
038300100389001a038300100389001a038300100389001a038300100389
001a038300100389001a038300100389001a0383fff50389fff503830010
0389001a038300100389001a04b1006604b1006604b1006604b1006604b1
006604b1006604b1006604b1006604b1006604b1006604b1006604b10066
04b1006604b1006604b1006604b1006604b1006604b1006604b1006604b1
006606750066067500660675006606750066067500660675006606750066
067500660675006604a1002304a1ffc504a1fe8a04a1fe6204a1ff2204a1
ffc604a1fe8b04a1fe6204a1ff2204fc00ac04fcfef005d1fe8205d1fe7a
0559feaa04fcfef005d1fe8205d1fe7a0559feaa0550005e0550ff0605f2
fe7b060dfe780599feaa0550ff0605f2fe7b0611fe7c0599feaa06650023
0665ffc50665fe8a0665fe620665ff220665ffc60665fe8b0665fe620665
ff2206c000ac06c0fef00795fe820795fe7a06c0fe4d06c0fef00795fe82
0795fe7a06c0fe4d0714005e0714ff0607b6fe7b07d1fe780714fe610714
ff0607b6fe7b07d5fe7c0714fe6101d9ffff01d900000289000002890000
039a000003290000032900000324000003290000032900000324000003f4
000003f400000324000001d9000003270000030c0000023200b601c40079
01c4007901c40079054e00ac0440000a042200ac0366001b044100ac06b2
005503ca004b04a500ac045800ac046a001b050c000f052400ac05b100ac
073800ac052b00630444006103e6000f03e6001e03e6001e0476003005d2
000f049a007404720074047200ad05f6002805f60028020400ac06680055
045f00ac050e000304fc00ac04fc00ac04720074070700ac04a1002304a1
0023061bffcc03e8005905250064052500640668005503ca001503ca004b
052200ac052200ac054c0063054c0063054c00630462004c0438000f0438
000f0438000f04720071035300ac061800ac0366001b0485003004270030
04400035065d0037061d003d041a003d070f0003072800ac0515005b0521
000f03ca005a05090003045f009903df00270434009902f90027039f0099
05c0003e0362004b03f4009903b6009903eb00270447000a0471009904d8
009905f10099046f00590362005a0319000a039d0022039d002203b20029
04c5000a03ea004203c0004203c0009904c8001904c800190583003e03cf
009904210016044700990454009903c0004205b6005f020400ac03d5002e
03d50058062f005c03fb005603fb006203fb00620583003e0362000803bc
004b04530095045300970438005a0431005a0431005a038b0004039f0022
039f0022039f002203c0002902c400990554009902f9002703b100290377
00290434006006550060059b004b03ba004b061f00160650009904450050
0481000a0362005a042b001604a800a103e8002703c500a10314002703ec
00a105d0004403800057041c00a103ca00a103ca002704530017049800a1
050100a1067700a104a2006503cb006d0359001c03830010038300100413
00360545001c041a006d03fa006d03fa00a1054f0020054f002001ec00a1
0578004403ff00a1045a0001047800a104a100a103fa006d062f00a103f4
001003f40010055cffe20380004204a2006504a200650578004403800003
03900057048900a0048900a004aa006604a9006604a9006603e4001e039d
001e039d001e039d001e03fa0044031400a1058300a10314002704170036
03cc003603e8004a0588004a0559007203d8007205d20001061900a10488
006c0444001c03800068045c000104000000080000000400000008000000
02af000002000000015500000450000001bc000001990000010000000000
00000000ffdc0000ff2a040e0024040e00240329009003fcfff901ff008c
0358008801c400540334005404a400540476010a03fcfffb0273004404ee
004f044400610444006103ad0027040e005306640099052a0020076000ac
064800ac071e002005f500ac0428001b03e6000f08a80032043afffe0482
002104b2005b0495002003ad0020044400610621004906210065057800e6
059d00e603fc005e070100bc03fc0062045201d7045200be0400fff60400
01bd040001bd0400fff6040001bd0400fff6070900aa045c005b047200ad
0444007104d0003a0562007403c9001006640094042f005f04180015035a
0053040b00300441006f03260010032700030327000303270003025400c0
025400c0025400c8025400c802aaff8c02aaff8c04e0005907f4000a07e2
001407980003076c0061064100ac050b002406a700ac05c80055073f00ac
03ca00210600009004b8001c085c0063054c003b076c0061076c00610444
0061056a0022053400990433001b05af00990480001b060b0099034e0016
05a9009403d2ffc40745005a049c005a06420059056a00220362005a06b8
006d05c300a10453001205c000a1050b0046066400a10380002205580087
042e002207f10066050f006806b0006d06b8006d039c006d03c7009602aa
00db040e008d0000ffdc0000fe5101cf0000022400bb01c7000001630061
02b1ff4b0aa000b404d5009202d5008302d5008304d500b202d500700aa0
00b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b4
0aa000b40000fc48000000000000fd170000000000000000039a0000039a
0000032400000324000003240000039a0000032400000324000002560000
032900000329000003bdffff02aaff8c055001e5027f008403240000039a
00000256000000000027000000e1000000ed0000001b0324000003240000
032400000324000003240000032400000324000003240000032400000324
000000000000000000000000000000000000039a0000039a000003460000
0000002703c10000030f00000346000003460000039a0000034800000348
000003a2000003a2000002560000035f00000000009e0000006700000022
0000009e0000009e0000009e0000009e0000009e0517fe820513fe7e049f
feaa03e6fe4703e6fe4703e6000e03e6000e03f4001003f4001003f40010
05b8001005b8001005b80010047800a1047800a10478006f063c00a1063c
00a1063c006f0383ffc80383ffc80383001004b1006604b1006604b10066
0675006606750066067500660000fdbc0000fd1a0000fd770000fd4f0000
fbfe0000fbfa0000fc000000fbfa0000fc000000fbfa0000fc000000fbfa
0000fc000000fc000000fc000000fc000000fc000000fc000000fc000000
fc000000fdd00000fc300000fc300000fbff0000fbff0000fbff0000fbff
0000fbff0000fc000000fcac0000fcad0000fcac0000fcac0000fd1b0000
fd1b0000fd340000fd340000fd340000fd340000fd600000fd600000fd73
0000fd730000fdcf0000fd5f0000fd5f0000fd5f0000fd5f0000fd7f0000
fd7f0000fca10000fd6f0000fdfd0000fcef0000fcf20000fca00000fca0
0000fcae0000fcad0000fc660000fca00000fc2f0000fc2f0000fc660000
fc5f0000fdd00000fcf10000fd6d0000fcf30000fd710000fd710000fdb1
0000fc650000fcf10000fcf10000fc2f0000fbff0000fd770000fc660000
fc660000fc650000fc650000fc650000fc650000fc460000fd790000fcde
0000fcde0000fd4b0000fd4b0000fca80000fca80000fd710000fda60000
fda60000fce30000fd4c0000fd4c0000fd4b0000fd4b0000fd7e0000fcdf
0000fcde0000fcde0000fc8f0000fc520000fc520000fc520000fc520000
fc920000fc970000fc970000fc560000fc560000fc910000fd820000fd82
0000fd700000fd700000fdfa0000fdfa0000fd5f0000fd5f0000fd790000
fd790000fd8f0000fd8f0000fd6e0000fd6e0000fd7a0000fd7a0000fcfb
0000fcfb0000fdb60000fdb60000fda80000fda80000fd680000fd680000
fd710000fd710000fcf10000fcf10000fcf10000fcf10000fc540000fc26
0000fc260000fc290000fc290000fc270000fc270000fc270000fc270000
fc350000fc350000fc350000fc350000fdb60000fda80000fda80000fce3
0000fd460000fd460000fd470000fd470000fd020000fd020000fd020000
fd020000fc650000fc660000fc9f0000fc9f0000fc9f0000fc9f0000fca1
0000fca10000fc9f0000fc9f0000fc9f0000fc9f0000fca10000fca10000
fc370000fc370000fc370000fc370000fca00000fca00000fc9f0000fcad
0000fd330000fd470000fc9f0000fc9f0000fc9f0000fc9f0000fbff0000
fc020000fbff0000fc000000fc370000fc370000fc370000fc370000fdbd
0000fdbd0000fca20000fca30000fca30000fdd10000fdd10000fdd10000
fdd10000fc6a0000fc6a03e6fe940389ffcb0389ffcb0389001a01d60089
04340060043400600434006004340060043c0025067600250aa000b40aa0
00b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b4
0aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa0
00b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b4
0aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa0
00b4047d00a3040e0023040e0054040e001b040e002e0557001e040e001e
0757002602710024027100250430000004e300ac0366000f0476006203cb
005a0438ffff039fffe106d700ac04a10023053f00ac05a2005d02ca0035
0438005a03800072016dffd802f5001c03ad004703bf003b0254007801de
00640254007801de006404fc00ac04340099058b000f056d002103ca004b
038f005a03c100220366001e046800220411001e035000a1034f00490849
00230610005c081400220671005c07cc0022063b005c068800230545005c
068800230545005c068800230545005c04440057036200500428001203a3
ffe9042800ac03a300990428001203a3ffe9040900ac027b0099035d0012
01d6fff6054cffe20438ffec05c8006304b9005a091b0063070f005a0422
00120434ffea054e0037052e003705cc0014067800250562006304340060
070c006305a40060041e00780335005004a7005303fd0032048a0022039d
0022071e003e05b8003503bc004b03a7004b0422001c0434ffea0422001c
0434ffea03a300ac032000990346003c0346003c03df001e03700014042b
005c042b005c0262003c05690060031b009907a300990569009902ca0099
051900a1034e002103b70064054cfff604340061035f00ac02ca009903c4
003503c4003503c40035035d001201d60099052400ac04340099035f00ac
02ca0099049f005a03b7005a04fc00ac02fe0000054f00ac046200990461
ffcc038dffe10362005a043400990504000f053f005003adffd602710025
051e00630444005a053800630437005a051e00630444005a050cffb803c4
00080428000803a30008052afffe0434001c0458002602ca000c03ad003a
03210051058d000f03ca004b053c006103ec00000428003003e6000f052e
000a035b0024047b00450664009903ad00590422005b06d700ac020400ac
08d50022048afff2062f005c03a4006f03fbfff204c80015027100250434
006002a6001401d6ff1d01d6fffa06640099043400990434009903c70049
03c70049043c007406cc005a06cc005a06cc005a070f005a070f005a0401
006403ed00a1028d009903dd00990393001404a6001403b2003f057b003f
01eaffd50434009404a4002706640099066400990470fffa0369001203be
001203690012041a00290377ff4a041aff4a0377fef003510022030c0084
02e9006c01ee0000015effc7031d00000434006004b10066065500030558
0016057900ac056c009906550052062c00380562006304340060071e003d
05b80035042800ac03a300990721000305db0016073800ac060c0099051f
00ac0450009904d100ad043c00990512ffec0447ffc2096e000508030017
049b0005040d0017050b0003043c0016052400280000ff8f0000ff7e0000
ff300000ff100000fefc0320007c0000ff2f0000ff310000ff530000ffb7
0000ff4c0000ff4d0000ffad0000fec30000fdc5000000000000ff4d0000
ff4d000000d50000fecb0000fe4b0000ff320000ff460000ff2f0000ff55
0000ff5e0000ff4d0000feb70000ff660000ff4d0000ff320000ff2f0000
ff5f0000ff55000000000000fe4d0000ff37000000000000000000000000
0000000000000000000000000000000000000000000000000000ffb70000
ffb7000000000000000000000000000000000000ffb70000ffc302730045
0000ff3101de00a10000048400000057022400960000ffa80000ffa80000
ff190000fe6e02eb009400000000044b006a046b006a03f3002b02f30019
038f0018048f008c049a008c01da009902530018049d0099046e006b0477
006b01da00990390001803a1001803ce002e0378001c04ae009904b30099
04a5005404ad005401da009902eb002b048b0028043100150427005b0439
005b0454006d0464006d037a002003e20019044b008c0451008c03900018
058c004a0591004a04d7003604e5003603b5009903b5009903b5009901ff
002a0359002b01da00990000ff0603b50099043100150577006904bb0018
05bb008c04fa002e04a4001c05da009904bc00180603003603fc0046044b
006a044b006a046b006a03f3002b03f3002b02f3001902f30019038f0018
038f0018049a008c048f008c0242001e01da009901da00990299001e0477
006b0242001e039000180390001803a1001803ce002e03ce002e0378001c
03adff6a03adff6a04ad005402eb002b048b00280439005b0464006d0454
006d03e200190451008c039000180591004a058c004a058c004a0591004a
0591004a04e5003604d7003603e8001c042f001d05f400ac03bf00370329
005903bf00370329005903ad004703210051025000ac02320094050e0082
04010064055e0050037d003208790063073500640440ffd703c2ffcd06d7
000f05df000a062600ac057b00990708006305c6005a06f000ac058d0099
04a10022039d002205c800550480001b06f000ac059b009904c8001403d2
0022051c002c0455001d05d20005050d001705b7000304d1001607a900ac
05f70060054c00630438005a054c00630438005a091b0063070f005a0655
007e0000fea207e2006f074b00c807e2002603d1007d0000006400000064
0000006400000064000000640000006400000064000000640000fe480000
ff32036e0000025b005e052700010477001703b700470338005107c9004b
06c2004b0706007405e6004205b5000104ed00170530000f043d000a03e6
000f0319000a051c00ac0468008503e6000f0319000a05340014048c0014
047200ad04340099071a00ac060f0099091b0063070f005a054c00630431
005a03a2006402e5006400000064040900ac036d009903e6000f03190014
052200ac04530099028d0007042800ac045a00ac042200ac0422005b04ec
00ac03e6000f03e6000f050c005b042800ac04280030028d000704440061
0444003803bf003b03ad00ac03ad005906d700ac052a00ac035d00ac03ad
0047045800ac0458004d04950024048a002204fc00ac050c0094028d00a9
071e003d0427003003e6001e045a005904a1002304a1002303e800ac03e8
006c020400ac054c0063052200aa052200aa035d001204ec005d02050097
02050097039500970395009702000097020000970454006403970064053d
004b0500000c083b003205c30031038200310a1500320a1a00320000fff6
042d004b042d004b06cc000005aa00c806f400c803d300620266006a033e
004507640031045900000266006a01ffffa8037e006a03ca0075005fffa8
0410018004100157041000ba04100047041000c3041000b5041000950410
004c0410004c041000aa057300c8022300490243007103400056035b00c5
0a6d008405ce00a3045f00880410018004100155041000b8041000430410
006f04100076041000930410004c0410004c041000aa024400b102820085
035a00850175009c0200008c0200008c02bf008c02bf008c02bf008c02bf
008c02bf008c02bf008c02d0009602d00096020f007b0201008c0201008c
02180071031e009e031e009e0282ffa80282ffa80282ffa804be006704be
00d2028200680282ffa80282002d02a000000282005b0282006c0282ffa8
028200680282ffa80282006d0282ffa80282006a0282ffa8028200ab0282
ffa80410007d041000c701ee006f0243006f03470070040600540350006f
0360005d038e003903ea003903ea00390364003901ee006f0243006f0347
00700406005403d9007003dd005d0393003803ea003903ea003903640039
0398005d0329003c027000d2027000b6027000490270001e0270004a0270
00410270002c0270001b0270001b02700039027000130270001702700023
0270002002700045027000120270003702700025027000260270001e0270
0028027000190270001b0270001402700019026600de026600c302660069
026600250266006c02660068026600580266002b0266002b026600640266
003c026600420266005702660048026600750266003e0266005e0266004f
0266004f0266002e026600510266004402660047026600400266004404c4
0031000000000000000004c4003104c400310000ffa80000fef50000fef9
0000fee40000fef50000fe1e0000ff090000fe840000ff310000ff5e0000
ff4a0000ff5e0000ff220000feeb0000ff170000ff2a0000ff490000ff25
0000ff290000ff650000ff120000ff4b0000ff480000ffaa0000ff480000
ff440000ff210000ff350000ff370000ff930000ff490000ff2a0000ff15
0000ffad0000fe390000fe920000ff030000ff190000ff3b0000ff220000
fe9f0000ff7b0000ff890000ff480000ff6a0000fe9f0000ff120000febb
0000ff2a0000ff610000ff610000ff840000ff690000ff480000ff290000
ff220000ff290000ff1e0000ff150000ff300000ffb20000ff4c0000ff3a
0000ffb20000ff4c0000ff3a0000fee50000feda0000fee50000ff620000
ff1e0000ff2a0000ff250000ff980000ff980000ff980000ff980000ff2d
0000fed20000ff470000ff170000ff6f0000fefc0000ff0b0000ff230000
ff290000ff210000ff240000ff150000ff2a0000ff220000ff3c0000fefc
0000ff480000ff130000ff070276000001790005018500250185007f0179
ffd10179ffda0185fffa0225007f0179ffc70179ffcb01deffbc01dd0004
01de005d01de007f01ddffe001ddffd901de003201de007f01ddffc001dd
ffc40669004c0669004c0669004c0669004c0669004c0669004c0669004c
0669004c0669004c0669004c0669004c0669004c0669004c0669004c0669
004c0669004c0669004c0669004c0669004c0669004c0669004c01f6ffa8
01f6ffa801f6ffa801f6ffa801f6ffa801f6ffa801f6ffa801f6ffa801f6
ffa801f6ffa801f6ffa801f6ffa801f6ff9501f6ffa801f6ffa801f6ffa8
01f6ffa801f6ffa801f6ffa801f6ffa801f6ffa80251ffa80251ffa80251
ffa80251ffa80251ffa80251ffa80251ffa80251ffa80251ffa80251ffa8
0251ffa80251ffa80251ff9d0251ffa80251ffa80251ffa80251ffa80251
ffa80251ffa80251ffa80251ffa806e2004c06e2004c06e2004c06e2004c
06e2004c06e2004c06e2004c06e2004c06e2004c06e2004c06e2004c06e2
004c06e2004c06e2004c06e2004c06e2004c06e2004c06e2004c06e2004c
06e2004c06e2004c04ca004c04ca004c04ca004c04ca004c04ca004c04ca
004c04ca004c04ca004c04ca004c04ca004c04ca004c04ca004c04ca004c
04ca004c04ca004c04ca004c04ca004c04ca004c04c5ffa804c5ffa804c5
ffa804c5ffa804c5ffa804c5ffa804c5ffa804c5ffa804c5ffa804c5ffa8
04c5ffa804c5ffa804c5ffa804c5ffa804c5ffa804c5ffa804c5ffa804c5
ffa8051dffa8051dffa8051dffa8051dffa8051dffa8051dffa8051dffa8
051dffa8051dffa8051dffa8051dffa8051dffa8051dffa8051dffa8051d
ffa8051dffa8051dffa8051dffa804ba004c04ba004c04ba004c04ba004c
04ba004c04ba004c04ba004c04ba004c04ba004c04ba004c04ba004c04ba
004c04ba004c04ba004c04ba004c04ba004c04ba004c04ba004c03470058
034700580347005803470058034700580347005803470058034700580347
005803470058034700580347005803470058034700580347005803f10057
03f1005703f1005703f1005703f1005703f1005703f1005703f1005703f1
005703f1005703f1005703f1005703f1005703f1005703f1005703580000
035800000358000003580000035800000358000003580000035800000358
000003580000035800000358000003580000035800000358000003580000
036d00000358000003a9000003a9000003a9000003a9000003a9000003a9
000003a9000003a9000003a9000003a9000003a9000003a9000003a90000
03a9000003a9000003a9000003a0000003a90000072b004c072b004c072b
004c072b004c072b004c072b004c072b004c072b004c072b004c072b004c
072b004c0507ffa80507ffa80507ffa80507ffa80507ffa80507ffa80507
ffa80507ffa80507ffa80507ffa80507ffa80566ffa80566ffa80566ffa8
0566ffa80566ffa80566ffa80566ffa80566ffa80566ffa80566ffa80566
ffa80791004c0791004c0791004c0791004c0791004c0791004c0791004c
0791004c0791004c0791004c0791004c0846004c0846004c0846004c0846
004c0846004c0846004c0616ffa80616ffa80616ffa80616ffa80616ffa8
0616ffa8063affa8063affa8063affa8063affa8063affa8063affa80865
004c0865004c0865004c0865004c0865004c0865004c061c003b061c003b
061c003b061c003b04d5ffa804d5ffa804d5ffa804d5ffa804f4ffa804f4
ffa804f4ffa804f4ffa8063b003b063b003b063b003b063b003b04b5004c
04b5004c04b5004c04b5004c04b5004c04b5004c04b5004c04b5004c03df
ffa803dfffa803dfffa803dfffa803dfffa803dfffa803dfffa803dfffa8
038effa8038effa8038effa8038effa8038effa8038effa8038effa8038e
ffa80401004c0401004c0401004c0401004c0401004c0401004c0401004c
0401004c06c8004c06c8004c06c8004c06c8004c06c8004c06c8004c06c8
004c06c8004c06c8004c06c8004c02dbffa802dbffa802dbffa802dbffa8
02dbffa802dbffa802dbffa802dbffa802dbffa802dbffa80351ffa80351
ffa80351ffa80351ffa80351ffa80351ffa80351ffa80351ffa80351ffa8
0351ffa8072f004c072f004c072f004c072f004c072f004c072f004c072f
004c072f004c072f004c072f004c04f9004c04f9004c04f9004c04f9004c
04f9004c02dbffa802dbffa802dbffa802dbffa802dbffa80351ffa80351
ffa80351ffa80351ffa80351ffa80506004c0506004c0506004c0506004c
0506004c0556003b0556003b0556003b0556003b0556003b0556003b0720
004c0720004c0720004c0720004c0720004c0720004c0720004c0720004c
0720004c0720004c0720004c0720004c0720004c0720004c03bdffa803bd
ffa803bdffa803bdffa803bdffa803bdffa803bdffa803bdffa803bdffa8
03bdffa803bdffa803bdffa803bdffa803bdffa803beffa803beffa803be
ffa803beffa803beffa803beffa803baffa803baffa803baffa803baffa8
03baffa803baffa803baffa803baffa803baffa803baffa803baffa803ba
ffa803baffa803baffa803baffa803baffa803baffa803baffa803baffa8
03baffa80635004c0635004c0635004c0635004c0635004c0635004c0736
004c0736004c0736004c0736004c0736004c0736004c0736004c0736004c
0736004c0736004c0736004c0736004c0736004c0736004c08d9003b07a5
ffa807d4ffa80909003b045f004c0469004c0469004c0469004c045f004c
045f004c045f004c01cdffa801d9ffa801d9ffa801d9ffa801cdffa801cd
ffa801cdffa8020cffa8020cffa8020cffa8020cffa8020cffa8020cffa8
020cffa804ad004c04ad004c04ad004c04ad004c04ad004c04ad004c04ad
004c036e0059036e0059036e0059036e0059032fffa8032fffa8032fffa8
032fffa80392ffa80392ffa80392ffa80392ffa804140059041400590414
005904140059045b004c045b004c045b004c045b004c045b004c045b004c
045b004c045b004c045b004c01f6ffa801f6ffa801f6ffa801f6ffa801f6
ffa801f6ffa801f6ffa801f6ffa801f6ffa80251ffa80251ffa80251ffa8
0251ffa80251ffa80251ffa80251ffa80251ffa80251ffa80495004c0495
004c0495004c0495004c0495004c0495004c0495004c0495004c0495004c
0524003b0524003b039e004c0524003b040fffa80411ffa801f6ffa80411
ffa8033effa8033effa802dcffa8033effa80378004c052e003b0378004c
052e003b02c6004c02c6004c02c6004c02c6004c02c6004c0378004c0378
004c039e004c039e004c0378004c037a0000037a0000037a0000037a0000
037a0000037a0000037a0000037a0000037a0000037a0000037a0000037a
0000037a0000037a0000037a0000037a00000317004c03cb000003cb0000
03cb000003cb000003cb000003cb000003cb000003cb000003cb000003cb
000003cb000003cb000003cb000003cb000003cb000003cb000002c9004c
055b004c055b004c055b003b055b0031055b0031055b004c055b004c055b
004c055b004c055b0039055b004c055b004c055b004c055b004c055b004c
055b004c055b004c01f6ffa801f6ffa801f6ffa801f6ffa801f6ffa801f6
ffa801f6ffa801f6ffa801f6ffa801f6ffa801f6ffa801f6ffa801f6ffa8
01f6ffa801f6ffa801f6ffa801f6ffa80251ffa80251ffa80251ffa80251
ffa80251ffa80251ffa80251ffa802abffa80251ffa80251ffa80251ffa8
0251ffa80251ffa80251ffa80251ffa80251ffa80251ffa80497004c0497
004c0497004c04970046049700460497004c0497004c0497004c0497004c
0497004c0497004c0497004c0497004c0497004c0497004c0497004c0497
004c055bff3b044bff0007dc004c07dc004c0306004c02d0001507dc004c
07dc004c01f6ffa801f6ffa80251ffa80251ffa802d0001502d000150301
007f0301007f036e005903d8007f0433007f0562004c05bc004c05a90000
060b000005a90000060b000005a90000060b000005a90000060b000004fa
000005ab00000441ffa804fa000005ab00000441ffa80467004c0467004c
01de007f0185007f043affd9043afffd0458003b0458003b04d4000304d4
003b04f2003b04f2003b08a4004b072c004b08a4004b072c004b09e90030
083f006b0763005f06cd0000095500000960ffe4096000000960fffe0930
ffff0185ffd901de000402d2007c02d2007c0179007f01dd007f0469004c
01d9ffa8020cffa804ad004c04f5003b04f5003b04f5003b04f5003b054e
003b054e003b054e003b054e003b04f5003b05ab000005ab00000400ffa8
0444ffa80444ffa80556003b0556003b0373000003730000037300000373
000003730000037300000373000003730000037300000373000003730000
037300000373000003730000037300000373000003a00000037300000387
000003870000038700000387000003870000038700000387000003870000
038700000387000003870000038700000387000003870000038700000387
000003470058034700580347005803470041034700580347005803470058
035800000358000006c8004c06c8004c06c8004c06c8004c06c8004c06c8
004c02dbffa802dbffa802dbff8d02dbff6f02dbffa802dbffa802dbffa8
03bdffa803bdffa803bdffa803bdffa803beffa803beffa801cdff2f032f
ffa801f6ff8904f5003b03b4ffa802dcff2802dcff2802dcff2802dcff28
02dcff2802dcff28032dffa8032dffa8032dffa8032dffa8032dffa8032d
ffa80245ff280245ff280245ff280245ff280243ff280243ff2801f6ffa8
01f6ffa801f6ffa801f6ff3301f6ff2301f6fed101f6ffa801f6ff5c01f6
ff5c01f6ff2201f6ff5d01f6ff5501f6ffa801f6ffa801f6ffa801f6ff33
01f6ff2201f6ff9401f6ff2201f6ff2201f6ff2201f6ff2201f6ff2201f6
ff2201f6ffa801f6ff3301f6ff2201f6ff2201f6ff4e01f6ff2201f6ff22
01f6ff2201f6ff2201f6ffa801f6ffa801f6ffa801f6ffa401f6ff9401f6
ff4101f6ffa801f6ffa501f6ffa501f6ff9201f6ff9c01f6ff9b01f6ffa8
01f6ffa801f6ffa801f6ffa401f6ff9201f6ffa801f6ff9201f6ff9201f6
ff9201f6ff9301f6ff9201f6ff9201f6ffa801f6ffa401f6ff9201f6ff92
01f6ff9201f6ff9201f6ff9201f6ff9201f6ff920251ffa80251ffa80251
ffa80251ffa40251ff940251ff410251ffa80251ffa50251ffa50251ff92
0251ff9c0251ff9b0251ffa80251ffa80251ffa80251ffa40251ff920251
ffa80251ff920251ff920251ff920251ff930251ff920251ff920251ffa8
0251ffa40251ff920251ff920251ff920251ff920251ff920251ff920251
ff9201fbffa801fbffa801fbffa801fbffa801fbffa801fbffa801fbffa8
01fbffa801fbffa801fbffa801fbffa801fbffa801fbffa801fbff9501fb
ffa801fbffa801fbffa801fbffa801fbffa801fbffa801fbffa801fbffa8
01fbffa801fbffa801fbffa801fbffa801fbffa801fbffa801fbffa801fb
ffa801fbffa801fbffa801fbffa801fbffa801fbffa801fbffa801fbffa8
01fbffa801fbffa801fbffa801fbffa801fbffa801fbffa801fbffa801fb
ffa801fbffa801fbffa801fbffa801fbffa801fbffa80233ffa80233ffa8
0233ffa80233ffa80233ffa80233ffa80233ffa80233ffa80233ffa80233
ffa80233ffa80233ffa80233ff9d0233ffa80233ffa80233ffa80233ffa8
0233ffa80233ffa80233ffa80233ffa80233ffa80233ffa80233ffa80233
ffa80233ffa80233ffa80233ffa80233ffa80233ffa80233ffa80233ffa8
0233ffa80233ffa80233ffa80233ffa80233ffa80255ffa80233ffa80233
ffa80233ffa80233ffa80233ffa80233ffa80233ffa80233ffa80233ffa8
0233ffa80233ffa801fbffa801fbffa801fbffa801fbff3301fbff2301fb
fed101fbffa801fbff5c01fbff5c01fbff2201fbff5d01fbff8801fbffa8
01fbffa801fbffa801fbff3301fbff2201fbff9401fbff2201fbff2201fb
ff2201fbff2201fbff2201fbff2201fbffa801fbff3301fbff2201fbff22
01fbff5201fbff2201fbff2201fbff2201fbff2201fbffa801fbffa801fb
ffa801fbffa401fbff9401fbff4101fbffa801fbffa501fbffa501fbff92
01fbff9c01fbff9b01fbffa801fbffa801fbffa801fbffa401fbff9201fb
ffa801fbff9201fbff9201fbff9201fbff9301fbff9201fbff9201fbffa8
01fbffa401fbff9201fbff9201fbff9201fbff9201fbff9201fbff9201fb
ff920233ffa80233ffa80233ffa80233ffa40233ff940233ff410233ffa8
0233ffa50233ffa50233ff920233ff9c0233ff9b0233ffa80233ffa80233
ffa80233ffa40233ff920233ffa80233ff920233ff920233ff920233ff93
0233ff920233ff920233ffa80233ffa40233ff920233ff920233ff920233
ff920233ff920233ff920233ff9202dcff2802dcff2802dcff2802dcff28
02dcff2802dcff2802dcff2802dcff2802dcff2802dcff2802dcff2802dc
ff2802dcff2802dcff2802dcff2802dcff2802dcff2802dcff2802dcff28
02dcff2802f3ff2702f3ff2702f3ff2702f3ff2702f3ff2702f3ff2702f3
ff2702f3ff2702f3ff2702f3ff2702f3ff2702f3ff2702f3ff2702f3ff27
02f3ff2702f3ff2702f3ff2702f3ff2702f3ff2702f3ff27032dffa8032d
ffa8032dffa8032dffa8032dffa8032dffa8032dffa8032dffa8032dffa8
032dffa8032dffa8032dffa8032dffa8032dffa8032dffa8032dffa8032d
ffa8032dffa8032dffa8032dffa803baffa803baffa803baffa803baffa8
03baffa803baffa803baffa803baffa803baffa803baffa803baffa803ba
ffa803baffa803baffa803baffa803baffa803baffa803baffa803baffa8
03baffa80245ff280245ff280245ff280245ff280245ff280245ff280245
ff280245ff280245ff280245ff280245ff280245ff280245ff280245ff28
0243ff280243ff280243ff280243ff280243ff280243ff2802f3ff2702f3
ff2702f3ff2702f3ff2702f3ff2702f3ff2702f3ff2702f3ff2702f3ff27
02f3ff2702f3ff2702f3ff2702f3ff2702f3ff2702f3ff2702f3ff2702f3
ff2702f3ff2702f3ff2702f3ff270694004c0694004c0694004c0694004c
0694004c0694004c0694004c0694004c0694004c0694004c0694004c0694
004c0694004c0694004c0736004c0736004c0736004c0736004c0736004c
0736004c0736004c0736004c0736004c0736004c0736004c0736004c0736
004c0736004c0668004c0668004c0668004c0668004c03d0004c03d0004c
03d0004c03d0004c0185ffc70185ff9601de005d01de003201f6ffa801f6
ffa801f6ffa801f6ffa801f6ffa801f6ff8201f6ffa801f6ffa801f6ff82
01f6ff8201f6ffa801f6ffa801f6ff8201f6ff8201f6ff9401f6ff8201f6
ff820251ffa80251ffa80251ffa80251ffa80251ffa80251ffa80251ffa8
0251ffa80251ffa80251ffa80251ffa80251ffa80251ffa80251ffa80251
ffa80251ffa801fbffa801fbffa801fbffa801fbffa801fbffa801fbff82
01fbffa801fbffa801fbff8201fbff8201fbffa801fbffa801fbff8201fb
ff8201fbff9401fbff8201fbff820233ffa80233ffa80233ffa80233ffa8
0233ffa80233ffa80233ffa80233ffa80233ffa80233ffa80233ffa80233
ffa80233ffa80233ffa80233ffa80233ffa804c5ffa804c5ffa804c5ffa8
04c5ffa804c5ffa804c5ffa804c5ffa804c5ffa8051dffa8051dffa8051d
ffa8051dffa8051dffa8051dffa8051dffa8051dffa80347005803470058
0347005803f1005703f1005703f100570507ffa80566ffa802dbffa80351
ffa803b4ffa80458003b04f2003b0458003b04f2003b0282ffa80000feb7
0000fef50000fef90000fee40000fef50000fe1e0000ff090000fe840000
ff310000ff5e0000ff500000ff5b0000ff2a0000feeb0000ff2b0000ff2a
0000ff490000ff2a0000ff2d0000ff650000ff120000ff4e0000ff4e0000
ffb10000ff490000ff440000ff210000ff350000ff370000ff9e0000ff49
0000ff2a0000ff150000ffb10000fe390000fe920000ff060000ff2c0000
ff3b0000ff210000fe9f0000ff7b0000ff950000ff480000ff6a0000fe9f
0000ff120000fec80000ff2d0000ff680000ff680000ff8b0000ff690000
ff490000ff290000ff220000ff290000ff1d0000ff1c0000ff2a0000ffba
0000fedf0000feda0000fed90000ff620000ff140000ff2a0000ff2a0000
ff980000ff980000ff980000ff980000ff2d0000feda0000ff4f0000ff1f
0000ff6f0000fefc0000ff1f0000ff270000ff2d0000ff210000ff2d0000
ff190000ff2a0000ff2a0000ff3c0000fefc0000ff4e0000ff180000ff15
04be006704be00ee0a07006b0321ffa80341001e0242001e02280071024c
006a024c006a0000ff1d042d004b0000ff8e0000ff2d0000ff870000ff49
0000ff2d0000ff2c0000ff560000ff240000ff990000ff420000ff970000
ff3f0000ff920000ff620000ff3f0000ff3e0000ff650000ff2e0000ffac
0000ff660000ff840000fef40000ff480000ff480000ff1d0000ff350000
ff560000ff370000ff560000ff090000ff090000ff1d0000fe760000fe76
0000ff5f0000ff5f0000000f0000000f0000ff9f0000ffae0000ff770000
ff6c0000ff590000ff6e0000ff000000ff8e0000ff2d0000ff870000ff2d
0000ff2c0000fec10000ff240000ff990000ff350000ff3f0000ff920000
ff3f0000ff3e0000fedc0000ff2e0000ff9f0000ff570000ffa00000ff4f
0000ff4e0000ff240000ff480000ff1d0000ff350000ff5a0000ff370000
ff560000ff090000ff090000ff1d0000ff240000fefb0000ff720000ff77
0000ff770000ff770000ff6e0000ff740458003b043a003b0461003b0443
003b04f2003b04d4003b04f2003b04d4003b053700040807000008660000
09380000095d0000055500000811ffdc0870ffdb0942ffdc0968ffdb0648
004c0543004c05f7004c0659004c07d6004c0833004c08b7004c0941004c
09c9004c09cf004c08f2004c0910004c073b004c0683004c053e004c0694
004c0637004c0585004c0647004c0647004c0557004c0557004c060c004c
060b004c0617004c075b004c077b004c079e004c07fa004c077b004c0813
004c079e004c078e004c09e4004c09d7004c068a004c048a004c071e004c
06a4004c074a004c0788004c0865004c084a004c0720004c06a8004c0720
004c04ad004c0722004c0453004c0688004c0688004c04a5004c04a5004c
0688004c0688004c0405004c0405004c0720004c051a004c0720004c0720
004c05f5004c0720004c0930004c091a004c04ba004c04cd004c064b004c
070a004c0825004c067a004c0624004c04e1004c051c004c04a5004c055a
004c04ce004c04a5004c04a5004c04ba004c04ba004c045e004c045e004c
052e004c0570004c0626004c0626004c05f5004c0668004c08f0004c07ed
004c0960003b0000ffaaff77000000>
<000000000000017e0000017e0000017e0000017e000002d8000002d80000
02d8000002d8000002d8000002d8000002d8000002d8000002d8000002d8
000002d8000002d8000002d8000002d8000002d8000002d8000002d80000
02d8000002d8000002d8000003d2000003d2000003d2000003d2000003d2
000003d2000003d2000003d2000003d2000003d2000003d2000003d20000
03d2000003d2000003d2000003d2000003d2000003d2000003d2000003d2
000003d2000003d2000003d2000003d2000003d2000003d2000003d20000
03d2000003d2000003d2000003d2000003d2000003d2000003d2000003d2
000003d2000003d2000003d2000003d2000003d2000003d2000003d20000
03d2000003d2000005560000055600000556000005560000055600000556
000005560000055600000556000005560000055600000556000005560000
055600000556000005560000055600000556000005560000055600000556
00000556000006d8000006d8000006d8000006d8000006d8000006d80000
06d8000006d8000006d8000006d8000006d8000006d8000006d8000006d8
000006d8000006d8000006d8000006d8000006d8000006d8000006d80000
06d8000006d8000006d8000006d8000006d8000006d8000006d8000006d8
000006d8000006d8000006d8000006d8000006d8000006d8000006d80000
06d8000006d8000006d8000006d8000006d8000006d8000006d8000006d8
000006d8000006d8000006d8000006d8000006d8000006d8000006d80000
06d8000006d8000006d8000006d8000006d8000006d8000006d8000006d8
000006d8000006d8000006d8000006d8000006d8000006d8000006d80000
06d8000006d8000006d8000006d8000006d8000006d8000006d8000006d8
000006d8000006d8000006d8000006d8000006d8000006d8000006d80000
06d8000006d8000006d8000006d8000006d8000006d8000006d8000006d8
000006d8000006d8000006d8000006d8000006d8000006d8000006d80000
06d8000006d8000006d8000006d8000006d8000006d8000006d8000006d8
000006d8000006d8000006d8000006d8000006d8000006d8000006d80000
06d8000006d8000006d8000006d8000006d8000006d8000006d8000006d8
000006d8000006d8000006d8000006d8000006d8000006d8000006d80000
06d8000006d8000006d8000006d8000006d8000006d8000006d8000006d8
000006d8000006d8000006d8000006d8000006d8000006d8000006d80000
06d8000006d8000006d8000006d8000006d8000006d8000006d8000006d8
000006d8000006d8000006d8000006d8000006d8000006d8000006d80000
06d8000006d8000006d8000006d8000006d8000006d8000006d8000006d8
000006d8000006d8000006d8000006d80000087c0000087c0000087c0000
087c0000087c0000087c0000087c0000087c0000087c0000087c0000087c
0000087c0000087c0000087c0000087c0000087c0000087c0000087c0000
087c0000087c0000087c0000087c0000087c0000087c0000087c0000087c
0000087c0000087c000009fa000009fa000009fa000009fa000009fa0000
09fa000009fa000009fa000009fa000009fa000009fa000009fa000009fa
000009fa000009fa000009fa000009fa000009fa000009fa000009fa0000
09fa000009fa000009fa000009fa000009fa000009fa000009fa000009fa
000009fa000009fa000009fa000009fa000009fa000009fa000009fa0000
09fa000009fa000009fa000009fa000009fa000009fa000009fa000009fa
000009fa000009fa000009fa000009fa000009fa000009fa000009fa0000
09fa000009fa000009fa000009fa000009fa000009fa000009fa000009fa
000009fa000009fa000009fa000009fa000009fa00000b0600000b060000
0b0600000b0600000b0600000b0600000b0600000b0600000b0600000b06
00000b0600000b0600000b0600000b0600000b0600000c5800000c580000
0c5800000cee00000cee00000cee00000cee00000cee00000cee00000cee
00000e3400000e3400000e3400000e3400000e3400000e3400000e340000
0e3400000e3400000e3400000e3400000e3400000e3400000e3400000e34
00000e3400000e3400000e3400000e3400000e3400000e3400000e340000
0f4800000f4800000f4800000f4800000f4800000f4800000f4800000f48
00000f4800000f4800000f4800000f4800000f4800000f480000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c0000106c0000106c0000106c0000106c
0000106c0000106c0000106c0000106c0000106c0000106c0000106c0000
106c0000106c0000106c0000106c000011f4000011f40000146200001462
000014620000146200001462000014620000146200001462000014620000
146200001462000014620000146200001462000014620000146200001462
000014620000146200001462000014620000146200001462000014620000
146200001462000014620000146200001462000014620000146200001462
000015ea0000177e000018f400001b1e00001cd200001e7800001e880000
1fe200001ff20000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e0000218e0000218e0000218e0000218e0000218e0000218e0000218e
0000218e0000218e0000218e0000218e0000218e0000218e0000218e0000
218e00010000192a043a00170108000800020010002f00870000123624eb
000400010000000e00ae0000000300000000021000000000000300000007
007602100001000000000000010802860001000000000003000e038e0001
000000000004000e039c0001000000000006000e03aa0001000000000007
003b03b80003000104090000021203f30003000104090001001c06050003
000104090002000e06210003000104090003001c062f0003000104090004
001c064b0003000104090006001c066700030001040900070076068300a9
002000320030003100360020004d006900630072006f0073006f00660074
00200043006f00720070006f0072006100740069006f006e002e00200041
006c006c0020005200690067006800740073002000520065007300650072
007600650064002e000d0048006500620072006500770020004f00700065
006e00540079007000650020004c00610079006f007500740020006c006f
00670069006300200063006f0070007900720069006700680074002000a9
002000320030003000330020002600200032003000300037002c00200052
0061006c00700068002000480061006e0063006f0063006b002000260020
004a006f0068006e00200048007500640073006f006e002e002000540068
006900730020006c00610079006f007500740020006c006f006700690063
00200066006f00720020004200690062006c006900630061006c00200048
006500620072006500770020006900730020006f00700065006e00200073
006f007500720063006500200073006f0066007400770061007200650020
0075006e00640065007200200074006800650020004d004900540020004c
006900630065006e00730065003b002000730065006500200065006d0062
006500640064006500640020006c006900630065006e0073006500200064
00650073006300720069007000740069006f006e00200066006f00720020
00640065007400610069006c0073002e00430061006c0069006200720069
00200069007300200061002000740072006100640065006d00610072006b
0020006f006600200074006800650020004d006900630072006f0073006f
00660074002000670072006f007500700020006f006600200063006f006d
00700061006e006900650073002ea92032303136204d6963726f736f6674
20436f72706f726174696f6e2e20416c6c20526967687473205265736572
7665642e0d486562726577204f70656e54797065204c61796f7574206c6f
67696320636f7079726967687420a92032303033202620323030372c2052
616c70682048616e636f636b2026204a6f686e20487564736f6e2e205468
6973206c61796f7574206c6f67696320666f72204269626c6963616c2048
6562726577206973206f70656e20736f7572636520736f66747761726520
756e64657220746865204d4954204c6963656e73653b2073656520656d62
6564646564206c6963656e7365206465736372697074696f6e20666f7220
64657461696c732e5044414d454b2b43616c696272695044414d454b2b43
616c696272695044414d454b2b43616c6962726943616c69627269206973
20612074726164656d61726b206f6620746865204d6963726f736f667420
67726f7570206f6620636f6d70616e6965732e00a9002000320030003100
360020004d006900630072006f0073006f0066007400200043006f007200
70006f0072006100740069006f006e002e00200041006c006c0020005200
690067006800740073002000520065007300650072007600650064002e00
0d000a0048006500620072006500770020004f00700065006e0054007900
7000650020004c00610079006f007500740020006c006f00670069006300
200063006f0070007900720069006700680074002000a900200032003000
3000330020002600200032003000300037002c002000520061006c007000
68002000480061006e0063006f0063006b002000260020004a006f006800
6e00200048007500640073006f006e002e00200054006800690073002000
6c00610079006f007500740020006c006f00670069006300200066006f00
720020004200690062006c006900630061006c0020004800650062007200
6500770020006900730020006f00700065006e00200073006f0075007200
63006500200073006f00660074007700610072006500200075006e006400
65007200200074006800650020004d004900540020004c00690063006500
6e00730065003b002000730065006500200065006d006200650064006400
6500640020006c006900630065006e007300650020006400650073006300
720069007000740069006f006e00200066006f0072002000640065007400
610069006c0073002e005000440041004d0045004b002b00430061006c00
690062007200690052006500670075006c00610072005000440041004d00
45004b002b00430061006c0069006200720069005000440041004d004500
4b002b00430061006c0069006200720069005000440041004d0045004b00
2b00430061006c006900620072006900430061006c006900620072006900
200069007300200061002000740072006100640065006d00610072006b00
20006f006600200074006800650020004d006900630072006f0073006f00
660074002000670072006f007500700020006f006600200063006f006d00
700061006e006900650073002e0000>
<b10903415302c802c60038001f02c702c60038001f02dd003802da005502
d9003802d7005502d8003802d7005502d6003802d5005502d4003802d300
5502d2003802d1005502bf003802be005502bd003802bc0055000402db00
3402db005402db0003003402db005402db006402db00a402db00d402db00
05006b02d50001000b02d10001001402c2004402c2006402c2007402c200
9402c2000500a402be000100a402bc000100200284b40918014a20b80283
b40918014a20b80282b40918014a20b80281b40918014a20b80280b40918
014a20b8027fb40918014a20b8027eb40918014a20b8027db40918014a20
b8027cb40918014a20b8027bb40918014a20b8027ab40918014a20b80279
b40918014a20b80278b40918014a20b80277b40918014a20b80276b40918
014a20b80275b40918014a20b80274b40918014a20b80273b40918014a20
b80271b40918014a20b80270b40918014a20b8026fb40918014a20b8026e
b40918014a20b8026db40918014a20b8026cb40918014a20b8026bb40918
014a20b8026ab40918014a20b80269b40918014a20b80268b40918014a20
b80267b40918014a20b80266b40918014a20b80265b40918014a20b80264
b40918014a20b80263b40918014a20b80262b40918014a20b80261b40918
014a20b80260b40918014a20b8025fb40918014a20b8025eb40918014a20
b8025db40918014a20b8025cb40918014a20b8025bb40918014a20b8025a
b40918014a20b80259b40918014a20b80258b40918014a20b80257b40918
014a20b80256b40918014a20b80255b40918014a20b80254b40918014a20
b80253b40918014a20b80252b40918014a20b80251b40918014a20b80250
b40918014a20b8024fb40918014a20b8024eb40918014a20b8024db40918
014a20b8024cb40918014a20b8024bb40918014a20b8024ab40918014a20
b80249b40918014a20b80248b40918014a20b80247b40918014a20b80246
b40918014a20b80245b40918014a20b80244b40918014a20b80243b40918
014a20b80242b40918014a20b80241b40918014a20b80240b40918014a20
b8023fb40918014a20b8023eb40918014a20b8023db40918014a20b8023c
b40918014a20b8023bb40918014a20b8023ab40918014a20b80239b40918
014a20b80238b40918014a20b80237b40918014a20b80236b40918014a20
b80235b40918014a20b80234b40918014a20b80233b40918014a20b80232
b40918014a20b80231b40918014a20b80230b40918014a20b8022fb40918
014a20b8022eb40918014a20b8022db40918014a20b8022cb40918014a20
b8022bb40918014a20b8022ab40918014a20b80229b40918014a20b80228
b40918014a20b80227b40918014a20b80226b40918014a20b80225b40918
014a20b80224b40918014a20b80223b40918014a20b80222b40918014a20
b80221b40918014a20b80220b40918014a20b8021fb40918014a20b8021e
b40918014a20b8021db40918014a20b8021cb40918014a20b8021bb40918
014a20b8021ab40918014a20b80219b40918014a20b80218b40918014a20
b80217b40918014a20b80216b40918014a20b80215b40918014a20b80214
b40918014a20b80213b40918014a20b80212b40918014a20b80211b40918
014a20b80210b40918014a20b8020fb40918014a20b8020eb40918014a20
b8020db40918014a20b8020cb40918014a20b8020bb40918014a20b8020a
b40918014a20b80209b40918014a20b80208b40918014a20b80207b40918
014a20b80206b40918014a20b80205b40918014a20b80204b40918014a20
b80203b40918014a20b80202b40918014a20b80201b40918014a20b80200
b40918014a20b801ffb40918014a20b801feb40918014a20b801fdb40918
014a20b801fcb40918014a20b801fbb40918014a20b801fab40918014a20
b801f9b40918014a20b801f8b40918014a20b801f7b40918014a20b801f6
b40918014a20b801f5b40918014a20b801f4b40918014a20b801f3b40918
014a20b801f2b40918014a20b801f1b40918014a20b801f0b40918014a20
b801efb40918014a20b801eeb40918014a20b801edb40918014a20b801ec
b40918014a20b801ebb40918014a20b801eab40918014a20b801e9b40918
014a20b801e8b40918014a20b801e7b40918014a20b801e6b40918014a20
b801e5b40918014a20b801e4b40918014a20b801e3b40918014a20b801e2
b40918014a20b801e1b40918014a20b801e0b40918014a20b801dfb40918
014a20b801deb40918014a20b801ddb40918014a20b801dcb40918014a20
b801dbb40918014a20b801dab40918014a20b801d9b40918014a20b801d8
b40918014a20b801d7b40918014a20b801d6b40918014a20b801d5b40918
014a20b801d4b40918014a20b801d3b40918014a20b801d2b40918014a20
b801d1b40918014a20b801d0b40918014a20b801cfb40918014a20b801ce
b40918014a20b801cdb40918014a20b801ccb40918014a20b801cbb40918
014a20b801cab40918014a20b801c9b40918014a20b801c8b40918014a20
b801c7b40918014a20b801c6b40918014a20b801c5b40918014a20b801c4
b40918014a20b801c3b40918014a20b801c2b40918014a20b801c1b40918
014a20b801c0b40918014a20b801bfb40918014a20b801beb40918014a20
b801bdb40918014a20b801bcb40918014a20b801bbb40918014a20b801ba
b40918014a20b801b9b40918014a20b801b8b40918014a20b801b7b40918
014a20b801b6b40918014a20b801b5b40918014a20b801b4b40918014a20
b801b3b40918014a20b801b2b40918014a20b801b1b40918014a20b801b0
b40918014a20b801afb40918014a20b801aeb40918014a20b801adb40918
014a20b801acb40918014a20b801abb40918014a20b801aab40918014a20
b801a9b40918014a20b801a8b40918014a20b801a7b40918014a20b801a6
b40918014a20b801a5b40918014a20b801a4b40918014a20b801a3b40918
014a20b801a2b40918014a20b801a1b40918014a20b801a0b40918014a20
b8019fb40918014a20b8019eb40918014a20b8019db40918014a20b8019c
b40918014a20b8019bb40918014a20b8019ab40918014a20b80199b40918
014a20b80198b40918014a20b80197b40918014a20b80196b40918014a20
b80195b40918014a20b80194b40918014a20b80193b40918014a20b80192
b40918014a20b80191b40918014a20b80190b40918014a20b8018fb40918
014a20b8018eb40918014a20b8018db40918014a20b8018cb40918014a20
b8018bb40918014a20b8018ab40918014a20b80189b40918014a20b80188
b40918014a20b80187b40918014a20b80186b40918014a20b80185b40918
014a20b80184b40918014a20b80183b40918014a20b80182b40918014a20
b80181b40918014a20b80180b40918014a20b8017fb40918014a20b8017e
b40918014a20b8017db40918014a20b8017cb40918014a20b8017bb40918
014a20b8017ab40918014a20b80179b40918014a20b80178b40918014a20
b80177b40918014a20b80176b40918014a20b80175b40918014a20b80174
b40918014a20b80173b40918014a20b80172b40918014a20b80171b40918
014a20b80170b40918014a20b8016fb40918014a20b8016eb40918014a20
b8016db40918014a20b8016cb40918014a20b8016bb40918014a20b8016a
b40918014a20b80169b40918014a20b80168b40918014a20b80167b40918
014a20b80166b40918014a20b80165b40918014a20b80164b40918014a20
b80163b40918014a20b80162b40918014a20b80161b40918014a20b80160
b40918014a20b8015fb40918014a20b8015eb40918014a20b8015db40918
014a20b8015cb40918014a20b8015bb40918014a20b8015ab40918014a20
b80159b40918014a20b80158b40918014a20b80157b40918014a20b80156
b40918014a20b80155b40918014a20b80154b40918014a20b80153b40918
014a20b80152b40918014a20b80150b40918014a20b8014fb40918014a20
b8014eb40918014a20b8014cb40918014a20b8014bb40918014a20b8014a
b40918014a20b80149b40918014a20b80148b40918014a20b80147b40918
014a20b80146b40918014a20b80145b40918014a20b80144b40918014a20
b80143b30918014ab80284b21e3e1fb80283b21e151fb80282b21e3e1fb8
0281b21e3a1fb80280b21e3e1fb8027fb21e3e1fb8027eb21e0c1fb8027d
b21e3e1fb8027cb21e3e1fb8027bb21e3e1fb8027ab21e3e1fb80279b21d
411fb80278b21d431fb80277b21d431fb80276b21d431fb80275b21d411f
b80274b21d431fb80273b21d431fb80272b21d411fb80271b21d421fb802
70b21d421fb8026fb21d421fb8026eb21d431fb8026db21d431fb8026cb2
1d431fb8026bb21c451fb8026ab21c451fb80269b21c451fb80268b21c45
1fb80267b21c451fb80266b21c441fb80265b21c451fb80264b21c451fb8
0263b21c451fb80262b21c451fb80261b21c451fb80260b21c451fb8025f
b21c451fb8025eb21c441fb8025db21c451fb8025cb21c451fb8025bb21c
451fb8025ab21c451fb80259b21c451fb80258b21c451fb80257b21c451f
b80256b21c451fb80255b21c451fb80254b21c451fb80253b21c451fb802
52b21c451fb80251b21c451fb80250b21c451fb8024fb21c451fb8024eb2
1c451fb8024db21c451fb8024cb21c451fb8024bb21c451fb8024ab21b49
1fb80249b21b491fb80248b21b4a1fb80247b21b4a1fb80246b21b4b1fb8
0245b21b4c1fb80244b21b4c1fb80243b21b4c1fb80242b21b4b1fb80241
b21b491fb80240b21b491fb8023fb21b4a1fb8023eb21b4a1fb8023db21b
4a1fb8023cb21b4b1fb8023bb21b4b1fb8023ab21b4c1fb80239b21b4c1f
b80238b21b4c1fb80237b21b4c1fb80236b21b4c1fb80235b21b491fb802
34b21b491fb80233b21b4a1fb80232b21b4a1fb80231b21b4a1fb80230b2
1b4b1fb8022fb21b4b1fb8022eb21b4c1fb8022db21b4c1fb8022cb21b4c
1fb8022bb21b4c1fb8022ab21b4c1fb80229b21b4c1fb80228b21b4c1fb8
0227b21b491fb80226b21b491fb80225b21b4a1fb80224b21b4a1fb80223
b21b4a1fb80222b21b4b1fb80221b21b4b1fb80220b21b4c1fb8021fb21b
4c1fb8021eb21b4c1fb8021db21b4c1fb8021cb21b4c1fb8021bb21b4c1f
b8021ab21a4e1fb80219b21a4e1fb80218b21a4f1fb80217b21a4f1fb802
16b21a4e1fb80215b21a4e1fb80214b21a4f1fb80213b21a4f1fb80212b2
1a4f1fb80211b21a4e1fb80210b21a4e1fb8020fb21a4f1fb8020eb21a4f
1fb8020db21a4f1fb8020cb21a4e1fb8020bb21a4e1fb8020ab21a4e1fb8
0209b21a4f1fb80208b21a4f1fb80207b21a4f1fb80206b219501fb80205
b219511fb80204b219511fb80203b219501fb80202b219511fb80201b219
511fb80200b219511fb801ffb219511fb801feb219501fb801fdb219511f
b801fcb219511fb801fbb219511fb801fab219501fb801f9b219511fb801
f8b219511fb801f7b219511fb801f6b219511fb801f5b218541fb801f4b2
18531fb801f3b218541fb801f2b218541fb801f1b218541fb801f0b21853
1fb801efb218541fb801eeb218541fb801edb218541fb801ecb218531fb8
01ebb218531fb801eab218541fb801e9b218541fb801e8b218541fb801e7
b218541fb801e6b218531fb801e5b218541fb801e4b218531fb801e3b218
541fb801e2b218541fb801e1b218541fb801e0b218531fb801dfb218531f
b801deb218541fb801ddb218541fb801dcb218541fb801dbb218541fb801
dab218531fb801d9b218541fb801d8b218541fb801d7b217571fb801d6b2
17561fb801d5b217561fb801d4b217571fb801d3b217571fb801d2b21757
1fb801d1b217571fb801d0b217561fb801cfb217561fb801ceb217571fb8
01cdb217571fb801ccb217571fb801cbb217571fb801cab217561fb801c9
b217561fb801c8b217571fb801c7b217571fb801c6b217571fb801c5b217
571fb801c4b217571fb801c3b217561fb801c2b217571fb801c1b217571f
b801c0b217571fb801bfb217561fb801beb217561fb801bdb217571fb801
bcb217571fb801bbb217571fb801bab217571fb801b9b217571fb801b8b2
17561fb801b7b217571fb801b6b217571fb801b5b217571fb801b4b21757
1fb801b3b2163f1fb801b2b2165b1fb801b1b2165b1fb801b0b2165b1fb8
01afb2165b1fb801aeb2165b1fb801adb2165b1fb801acb2165b1fb801ab
b2165b1fb801aab2163e1fb801a9b2163f1fb801a8b2163f1fb801a7b216
5b1fb801a6b2165b1fb801a5b2165b1fb801a4b2165b1fb801a3b2165b1f
b801a2b2165b1fb801a1b2165b1fb801a0b2165b1fb8019fb2163e1fb801
9eb2163f1fb8019db2163f1fb8019cb2165b1fb8019bb2165b1fb8019ab2
165b1fb80199b2165b1fb80198b2163e1fb80197b2165b1fb80196b2165b
1fb80195b2165b1fb80194b2163e1fb80193b2163f1fb80192b2163f1fb8
0191b2165b1fb80190b2165b1fb8018fb2165b1fb8018eb2165b1fb8018d
b2165b1fb8018cb2163f1fb8018bb2165b1fb8018ab2165b1fb80189b216
5b1fb80188b2165b1fb80187b2165b1fb80186b215611fb80185b215621f
b80184b215621fb80183b215661fb80182b215661fb80181b215551fb801
80b215451fb8017fb215361fb8017eb215361fb8017db215611fb8017cb2
15621fb8017bb215621fb8017ab215641fb80179b215661fb80178b21566
1fb80177b215661fb80176b215661fb80175b215661fb80174b215661fb8
0173b215451fb80172b215621fb80171b215621fb80170b215631fb8016f
b215641fb8016eb215661fb8016db215661fb8016cb215661fb8016bb215
661fb8016ab215661fb80169b215621fb80168b215621fb80167b215611f
b80166b215641fb80165b215641fb80164b215661fb80163b215661fb801
62b215661fb80161b215661fb80160b215661fb8015fb215661fb8015eb2
15551fb8015db215451fb8015cb215451fb8015bb215361fb8015ab21561
1fb80159b215621fb80158b215621fb80157b215631fb80156b215641fb8
0155b215661fb80154b215661fb80153b215661fb80152b215661fb80151
b214401fb80150b214551fb8014fb214561fb8014eb214831fb8014db214
2d1fb8014cb214401fb8014bb214401fb8014ab214411fb80149b214401f
b80148b214401fb80147b214411fb80146b2147e1fb80145b214871fb801
44b2147f1fb80143b214801fb80142b212461fb80141b212461fb80140b2
12461fb8013fb212461fb8013eb212441fb8013db212461fb8013cb21159
1fb8013bb211591fb8013ab2115b1fb80139b2115b1fb80138b211471fb8
0137b211581fb80136b2115a1fb80135b2115b1fb80134b2115b1fb80133
b2112c1fb80132b211471fb80131b211551fb80130b211571fb8012fb211
571fb8012eb211581fb8012db211591fb8012cb211591fb8012bb2115a1f
b8012ab2115a1fb80129b2115b1fb80128b2115b1fb80127b2115b1fb801
26b2115b1fb80125b211561fb80124b211561fb80123b211571fb80122b2
11581fb80121b211591fb80120b2115a1fb8011fb2115a1fb8011eb2115b
1fb8011db2115b1fb8011cb2115b1fb8011bb2115b1fb8011ab2115b1fb8
0119b2105d1fb80118b2105e1fb80117b2105f1fb80116b2105f1fb80115
b2105f1fb80114b2105f1fb80113b2105f1fb80112b2105d1fb80111b210
5e1fb80110b2105f1fb8010fb2105f1fb8010eb2105f1fb8010db2105f1f
b8010cb2105d1fb8010bb2105e1fb8010ab2105f1fb80109b2105f1fb801
08b2105f1fb80107b2105f1fb80106b2105d1fb80105b2105e1fb80104b2
105f1fb80103b2105f1fb80102b2105f1fb80101b2105f1fb8010040ff0f
621fff0f621ffe0f631ffd0f641ffc0f621ffb0f621ffa0f621ff90f631f
f80f641ff70f641ff60f641ff50f641ff40f621ff30f621ff20f631ff10f
641ff00f641fef0f641fee0f641fed0f621fec0f621feb0f631fea0f641f
e90f641fe80f641fe70f641fe60e671fe50e681fe40e681fe30e681fe20e
681fe10e671fe00e681fdf0e681fde0e681fdd0e671fdc0e681fdb0e681f
da0e681fd90e681fd80d6b1fd70d311fd60d6b1fd50d6c1fd40d261fd30d
261fd20d6c1fd10d2b1fd00d2b1fcf0d2b1fce0d6b1fcd0d6c1fcc0d6d1f
cb0d6b1fca0d6c1fc90d6d1fc80d6a1fc70d691fc60d681fc50d671fc40d
261fc30d311fc20d311fc10d311f40ffc00d311fbf0d311fbe0d311fbd0c
711fbc0c721fbb0c731fba0c741fb90c741fb80c741fb70c711fb60c711f
b50c721fb40c731fb30c741fb20c741fb10c741fb00c741faf0b791fae0b
7a1fad0b7c1fac0b7d1fab0b7e1faa0b7e1fa90b7e1fa80b7e1fa70b7e1f
a60b7e1fa50b2d1fa40b7e1fa30b7e1fa20b791fa10b7e1fa00b6b1f9f0b
791f9e0b7e1f9d0b7e1f9c0b791f9b0b7a1f9a0b7c1f990b7d1f980b7e1f
970b7e1f960b7e1f950b7e1f940b7e1f930b7e1f920b6b1f910b2d1f900a
4e1f8f0a4f1f8e0a671f8d0aa51f8c0aa71f8503251f8403381f8301381f
8255805581ab80557f557d557eab7d550b7d010b7d1b7d4b7d7b7dab7ddb
7d4012060a7c557a557bab7a557955775578ab7755ba028600660285403c
5576ab755504751475747503f47501ab7501447501307501020075107520
75030c7455725573ab7255007250728072b072043bb072e072020072010a
b8ffc0b3721b1e46b8ffc0407c720d104671556f5570ab6f556e666d556a
03251f6938675568ab67556638645565ab645563386255613860555f385d
555eab5d555c385a555bab5a55593858555703251f5638545555ab545553
38515552ab51554f384e554e03251f4d384b554cab4b554a38485549ab48
55473846554503381f001c101c201c0310b8ffc0404e1c1b1e46001b0142
301b401be01bf01b04001bb01bc01b03120f1a1f1a02290f1901434f1901
6f197f198f19030f18cf18024018292c460f17cf17df17ef170413401729
2e460016101620160315b8ffc0b3164d5446b8ffc0b3163f4446b8ffc0b3
16313546b8ffc0401f162326460f15010f151f150245ef15018600030120
01010001100120010308b8ffc0b401151f4603bd01000100000500010190
00542b4bb80800524bb008505bb00188b02553b00188b040515ab00688b0
00555a5b58b101018e59b101024354b0144b515a58b101018e59858d8d00
1d424bb01d5358b203a0a01d42594bb0805358b20340401d42594bb0ff53
58b20300001d42592b5e7375732b58403d0011e011f0110315bf10cf1002
0f0f010f0fff0f02400f3135460f0e1f0e020f0e1f0eff0e03400e313746
0f0d1f0d020f0d1f0dff0d0316400d313746b8ffc040270c5054460f0b1f
0b02553f0b4f0b02400b3f4346400b2d3046000301200101000110012001
0308b8ffc0b301151f462b5e7375732b2b745e732b2b5e73742b73742b73
74745e735901755e73742b2b2b2b5e732b5e732b7374755e735e735e7375
5e732b5e73002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b5e73755e732b2b5e735f73737373742b2b2b2b2b2b5e7374
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2bb1000243545841ff02840064028300640282006402810064028000
64027f0064027e0064027d0064027c0064027b0064027a00640279006402
780064027700640276006402750064027400640273006402710064027000
64026f0064026e0064026d0064026c0064026b0064026a00640269006402
680064026700640266006402650064026400640263006402620064026100
6402600064025f0064025e0064025d0064025c0064025b0064025a006402
590064025800640257006402560064025500640254006402530064025200
640251006402500064024f0064024e0064024d0064024c0064024b006402
4a0064024900640248006402470064024600640245006402440064024300
64024200640241006402400064023f0064023e0064023d0064023c006402
3b0064023a00640239006402380064023700640236006402350064023400
6402330064023200640231006402300064022f0064022e0064022d006402
2c0064022b0064022a006402290064022800640227006402260064022500
640224006402230064022200640221006402200064021f0064021e006402
1d0064021c0064021b0064021a0064021900640218006402170064021600
64021500640214006402130064021200640211006402100064020f006402
0e0064020d0064020c0064020b0064020a00640209006402080064020700
640206006402050064020441ff0064020300640202006402010064020000
6401ff006401fe006401fd006401fc006401fb006401fa006401f9006401
f8006401f7006401f6006401f5006401f4006401f3006401f2006401f100
6401f0006401ef006401ee006401ed006401ec006401eb006401ea006401
e9006401e8006401e7006401e6006401e5006401e4006401e3006401e200
6401e1006401e0006401df006401de006401dd006401dc006401db006401
da006401d9006401d8006401d7006401d6006401d5006401d4006401d300
6401d2006401d1006401d0006401cf006401ce006401cd006401cc006401
cb006401ca006401c9006401c8006401c7006401c6006401c5006401c400
6401c3006401c2006401c1006401c0006401bf006401be006401bd006401
bc006401bb006401ba006401b9006401b8006401b7006401b6006401b500
6401b4006401b3006401b2006401b1006401b0006401af006401ae006401
ad006401ac006401ab006401aa006401a9006401a8006401a7006401a600
6401a5006401a4006401a3006401a2006401a1006401a00064019f006401
9e0064019d0064019c0064019b0064019a00640199006401980064019700
640196006401950064019400640193006401920064019100640190006401
8f0064018e0064018d0064018c0064018b0064018a006401890064018800
640187006401860064018500644180018400640183006401820064018100
6401800064017f0064017e0064017d0064017c0064017b0064017a006401
790064017800640177006401760064017500640174006401730064017200
640171006401700064016f0064016e0064016d0064016c0064016b006401
6a0064016900640168006401670064016600640165006401640064016300
64016200640161006401600064015f0064015e0064015d0064015c006401
5b0064015a00640159006401580064015700640156006401550064015400
64015300640152006401500064014f0064014e0064014c0064014b006401
4a0064014900640148006401470064014600640145006401440064014300
642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b00737373737373742b2b2b2b2b2b2b2b2b2b185f
5e0000>
[8591 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
3 5218 1004 <00020048ffed03c705210013002b010bb0852b584019281201291101260d
01260c012608012507012a03012902012db8ffc040250f024d602d011418
10014d14100f014d14160d014d140a0c014d14200b014d14180c014d14bb
022d00000020ffe8b310014d20b8fff0b30f014d20b8ffeab30d014d20b8
fff6b30c014d20b8ffe8b60c014d24200120b8022d40090a200030004000
030ab8fff040090f014d2f0a4f0a0200b8ffd040090f014d0a100f024d00
b8ffc0400a0f024d000a000a2d2c1bb8010ab20f5325b8010ab10556003f
ed3fed11120139392f2f2b2b2b5d2b5d10e15d2b2b2b2b2b10e12b2b2b2b
2b2b31305d2b5d5d5d5d5d5d5d5d1bb10f1bb8010ab46c0f530525b8010a
b26c055600183f2b3f2b30315901140e0223222e0235343e0233321e0207
342e0423220e0215141e0233323e0403c72f6db0817aa7662b306cb0807b
a7662bb00e1b2b3c4d30556a3d161e41654838553d281809028a95f6b161
57a9f7a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24435e72
8500>VPLAAA+Calibri AddT42Char 
3 382 4 <00020023fffa047e05140022002600dcb0852b58b90024ffe8b40c10014c
23b8ffe8b40c10014c26b8fff0b40b10014c0bb8fff0b40b10014c0ab8ff
f0401a0b10014c25100b10014c0d100b10014c0c100b10014c40280125b8
fff0402c0b014d24232625f40c0b0c18221d230a0d0116040c000c100c02
af23bf23cf2303230c230c121d5212550555003f3f3f1239392f2f5d5d11
173911123939113310ed3211333130012b5d2b2b2b2b2b2b002b2b1b401e
2423260c25f46c0b0c18221d230a0d0116040c230c230c121d5212550555
00183f3f3f1239392f2f1117391112393911332b32113330315925161606
0623222e02270321030e03232226263637013e0333321e02170723032104
75080110251f1f251309046ffde66a030a13231c1d250f010801b2040d19
271e202a1a0e047b01df01c23d161b0e0403070c09013bfec9090d090405
0e1b1604b20b0e080303080f0b8dfd7b>VPLAAA+Calibri AddT42Char 
3 728 24 <000200ac0000048f050e0012001f0098b0852b58401d3f2101131810014d
13100f014d13140d014d13120c014d13180b014d13bb02320000001affe8
b310014d1ab8fff0b30f014d1ab8fff0b30d014d1ab8fff6b30c014d1ab8
ffe8b30b014d1abb021100090018010cb20e511bb80126b10554003fed3f
ed012fe12b2b2b2b2bd4e12b2b2b2b2b31305d1bb10e18b8010cb46c0e51
051bb80126b26c055400183f2b3f2b30315901140e022321222635113436
3321321e0207342e0223231133323e02048f56a5f0a6feee172929170125
a8e89d51b5346faa86afb17caa7239029aa8fba5521f270482271f57a3e8
9969b5844afc113e80c1>VPLAAA+Calibri AddT42Char 
3 978 68 <000100acfffa062b050e003c00d6b0852b584010603e703e020d3030172f
2f0a2e18181ab8ffe8b310014d1ab8fff0b30f014d1ab8fff0b30d014d1a
b8fff6b30c014d1ab8ffe8b30b014d1ab80211401e24310c0c0a1810014d
0a100f014d0a100d014d0a0a0c014d0a180b014d0aba02110000ffc04019
0b014d002436510b18170d2f18312e061f28511f5512550555003f3f3f3f
12173911333f012fd42be12b2b2b2b2b32113310e12b2b2b2b2b32113311
393d2f3333113331305d1b401436510b18170d2f18312e061f28511f5512
55055500183f3f3f3f12173911333f30315925140e0223222e0235112301
0e0323222e0227012311140e0223222e02351134363333321e0217013301
3e033333321e0215062b08141f191721130802fe33030b151d14151e140b
02fe470108142019182013072c1b68203024180901770501860b1a1f2619
6d0f1b130c1a080c070505070c080467fb94070a070304070a06046cfb99
080c070505070c0804a62a240c1a281bfc5703a61e2a190b09131d15>VPLAAA+Calibri AddT42Char 
3 0 0 <00050000fe7303d2050e000300070039004d004e0097b0852b58bc000d01
520016003a01b5b5154444082d07be014300020020015400080001014340
0f04020db71a1a3f23b735068d031149b8012db43f078d0202003ffddefd
ce2ffddeed12392fed012fdde1dee110f1ce11392f33e1d4e131301b4014
1a0db76c1a1a3f3523b76c3503068d6c03113f49b8012d40096c3f400207
8d6c020200183f2b1ace2bce2f2bce2b12392f2b30315901112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>VPLAAA+Calibri AddT42Char 
VPLAAA+Calibri /CharStrings get begin
/zero 1004 def
/A 4 def
/D 24 def
/M 68 def
end
VPLAAA+Calibri /Encoding get
dup 48 /zero put
dup 65 /A put
dup 68 /D put
dup 77 /M put
pop
end
%ADOEndSubsetFont
/EDTSBW+Calibri /VPLAAA+Calibri findfont ct_VMDictPut
/EDTSBW+Calibri*1 
[48{/.notdef}rp /zero 16{/.notdef}rp /A 2{/.notdef}rp /D 8{/.notdef}rp /M 
178{/.notdef}rp]
EDTSBW+Calibri nf
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
197.744 550.161 mo
(DMA0)
[7.44054 10.3141 6.96045 0 ]xsh
306.96 536.76 mo
349.8 536.76 li
349.8 554.52 li
306.96 554.52 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
306.96 536.76 mo
349.8 536.76 li
349.8 554.52 li
306.96 554.52 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
312.895 549.75 mo
(DMA0)
[7.44052 10.3141 6.96045 0 ]xsh
536.76 537 mo
579.6 537 li
579.6 554.76 li
536.76 554.76 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
536.76 537 mo
579.6 537 li
579.6 554.76 li
536.76 554.76 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
542.768 550.037 mo
(DMA0)
[7.44055 10.314 6.96045 0 ]xsh
422.04 536.64 mo
464.88 536.64 li
464.88 554.4 li
422.04 554.4 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
422.04 536.64 mo
464.88 536.64 li
464.88 554.4 li
422.04 554.4 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
427.978 549.67 mo
(DMA0)
[7.44052 10.3141 6.96045 0 ]xsh
192 423.24 mo
234.84 423.24 li
234.84 441 li
192 441 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
192 423.24 mo
234.84 423.24 li
234.84 441 li
192 441 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
197.964 436.265 mo
(DMA0)
[7.44054 10.3141 6.96045 0 ]xsh
307.08 422.88 mo
350.04 422.88 li
350.04 440.64 li
307.08 440.64 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
307.08 422.88 mo
350.04 422.88 li
350.04 440.64 li
307.08 440.64 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
313.115 435.854 mo
(DMA0)
[7.44052 10.3141 6.96045 0 ]xsh
537 423.12 mo
579.84 423.12 li
579.84 440.88 li
537 440.88 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
537 423.12 mo
579.84 423.12 li
579.84 440.88 li
537 440.88 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
542.987 436.141 mo
(DMA0)
[7.44055 10.314 6.96045 0 ]xsh
422.16 422.76 mo
465.12 422.76 li
465.12 440.52 li
422.16 440.52 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
422.16 422.76 mo
465.12 422.76 li
465.12 440.52 li
422.16 440.52 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
428.198 435.773 mo
(DMA0)
[7.44052 10.3141 6.96045 0 ]xsh
306.6 309.96 mo
349.56 309.96 li
349.56 327.72 li
306.6 327.72 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
306.6 309.96 mo
349.56 309.96 li
349.56 327.72 li
306.6 327.72 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
312.63 322.969 mo
(DMA0)
[7.44052 10.3141 6.96045 0 ]xsh
191.52 310.32 mo
234.36 310.32 li
234.36 328.2 li
191.52 328.2 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
191.52 310.32 mo
234.36 310.32 li
234.36 328.2 li
191.52 328.2 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
197.479 323.38 mo
(DMA0)
[7.44054 10.3141 6.96045 0 ]xsh
536.52 310.2 mo
579.36 310.2 li
579.36 328.08 li
536.52 328.08 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
536.52 310.2 mo
579.36 310.2 li
579.36 328.08 li
536.52 328.08 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
542.503 323.256 mo
(DMA0)
[7.44055 10.314 6.96045 0 ]xsh
421.68 309.84 mo
464.64 309.84 li
464.64 327.72 li
421.68 327.72 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
421.68 309.84 mo
464.64 309.84 li
464.64 327.72 li
421.68 327.72 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
427.713 322.889 mo
(DMA0)
[7.44052 10.3141 6.96045 0 ]xsh
306.6 195.6 mo
349.56 195.6 li
349.56 213.36 li
306.6 213.36 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
306.6 195.6 mo
349.56 195.6 li
349.56 213.36 li
306.6 213.36 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
312.63 208.635 mo
(DMA0)
[7.44052 10.3141 6.96045 0 ]xsh
191.52 196.08 mo
234.36 196.08 li
234.36 213.84 li
191.52 213.84 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
191.52 196.08 mo
234.36 196.08 li
234.36 213.84 li
191.52 213.84 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
197.479 209.046 mo
(DMA0)
[7.44054 10.3141 6.96045 0 ]xsh
536.52 195.96 mo
579.36 195.96 li
579.36 213.72 li
536.52 213.72 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
536.52 195.96 mo
579.36 195.96 li
579.36 213.72 li
536.52 213.72 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
542.503 208.922 mo
(DMA0)
[7.44055 10.314 6.96045 0 ]xsh
421.68 195.6 mo
464.64 195.6 li
464.64 213.36 li
421.68 213.36 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
421.68 195.6 mo
464.64 195.6 li
464.64 213.36 li
421.68 213.36 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
427.713 208.555 mo
(DMA0)
[7.44052 10.3141 6.96045 0 ]xsh
1 lj
10 ml
269.025 154.32 mo
282.029 186.422 295.034 218.525 292.936 249.245 cv
290.839 279.965 273.639 309.302 256.44 338.64 cv
0 1 1 .00173953 cmyk
@
384.506 148.2 mo
397.553 181.954 410.6 215.707 408.495 248.007 cv
406.391 280.307 389.136 311.153 371.88 342 cv
@
498.105 154.32 mo
511.109 186.422 524.114 218.525 522.016 249.245 cv
519.919 279.965 502.719 309.302 485.52 338.64 cv
@
613.665 150.12 mo
626.669 183.205 639.674 216.289 637.576 247.949 cv
635.479 279.609 618.279 309.845 601.08 340.08 cv
@
695.76 579.612 mo
662.989 566.48 630.218 553.348 598.858 555.466 cv
567.498 557.584 537.549 574.952 507.6 592.32 cv
@
697.2 462.972 mo
664.094 449.84 630.989 436.708 599.309 438.826 cv
567.629 440.944 537.374 458.312 507.12 475.68 cv
@
697.2 348.252 mo
664.115 335.12 631.031 321.988 599.371 324.106 cv
567.711 326.224 537.475 343.592 507.24 360.96 cv
@
697.2 231.612 mo
664.45 218.48 631.699 205.348 600.359 207.466 cv
569.019 209.584 539.09 226.952 509.16 244.32 cv
@
586.815 687.48 mo
573.811 654.939 560.806 622.397 562.904 591.257 cv
565.001 560.117 582.201 530.379 599.4 500.64 cv
@
472.126 688.92 mo
458.782 656.379 445.437 623.837 447.59 592.697 cv
449.742 561.557 467.391 531.819 485.04 502.08 cv
@
357.379 687.48 mo
344.501 654.939 331.625 622.397 333.702 591.257 cv
335.779 560.117 352.81 530.379 369.841 500.64 cv
@
242.532 688.92 mo
229.4 656.128 216.268 623.336 218.386 591.956 cv
220.504 560.576 237.872 530.608 255.24 500.64 cv
@
160.32 262.065 mo
192.422 275.069 224.525 288.074 255.245 285.976 cv
285.965 283.879 315.302 266.679 344.64 249.48 cv
@
158.88 377.189 mo
191.442 390.363 224.004 403.538 255.164 401.413 cv
286.324 399.288 316.082 381.864 345.84 364.44 cv
@
157.44 491.258 mo
190.546 504.007 223.651 516.757 255.331 514.7 cv
287.011 512.644 317.266 495.782 347.52 478.92 cv
@
156.96 605.556 mo
190.191 618.985 223.422 632.415 255.222 630.249 cv
287.022 628.083 317.391 610.321 347.76 592.56 cv
@
278.64 363.12 mo
308.361 345.6 338.081 328.08 368.041 328.08 cv
398.001 328.08 428.201 345.6 458.4 363.12 cv
@
279.12 249.6 mo
308.86 232.08 338.601 214.56 368.581 214.56 cv
398.561 214.56 428.78 232.08 459 249.6 cv
@
279.12 591.12 mo
308.86 573.6 338.601 556.08 368.581 556.08 cv
398.561 556.08 428.78 573.6 459 591.12 cv
@
279.72 479.28 mo
309.46 460.02 339.201 440.76 369.181 440.76 cv
399.161 440.76 429.38 460.02 459.6 479.28 cv
@
575.28 478.32 mo
545.242 495.9 515.204 513.48 484.924 513.48 cv
454.644 513.48 424.122 495.9 393.6 478.32 cv
@
574.8 591.96 mo
545.06 609.48 515.319 627 485.339 627 cv
455.359 627 425.14 609.48 394.92 591.96 cv
@
575.4 250.44 mo
545.362 267.96 515.324 285.48 485.044 285.48 cv
454.764 285.48 424.242 267.96 393.72 250.44 cv
@
574.2 363.96 mo
544.46 381.48 514.719 399 484.739 399 cv
454.759 399 424.54 381.48 394.32 363.96 cv
@
486 387.24 mo
503.52 416.98 521.04 446.721 521.04 476.701 cv
521.04 506.681 503.52 536.9 486 567.12 cv
@
599.52 387.84 mo
617.1 417.58 634.68 447.321 634.68 477.301 cv
634.68 507.281 617.1 537.5 599.52 567.72 cv
@
258 387.84 mo
275.58 417.58 293.16 447.321 293.16 477.301 cv
293.16 507.281 275.58 537.5 258 567.72 cv
@
371.64 388.44 mo
389.16 418.161 406.68 447.881 406.68 477.841 cv
406.68 507.801 389.16 538.001 371.64 568.2 cv
@
371.28 454.68 mo
353.76 424.94 336.24 395.199 336.24 365.219 cv
336.24 335.239 353.76 305.02 371.28 274.8 cv
@
257.76 454.08 mo
240.24 424.34 222.72 394.599 222.72 364.619 cv
222.72 334.639 240.24 304.42 257.76 274.2 cv
@
599.28 454.08 mo
581.76 424.34 564.24 394.599 564.24 364.619 cv
564.24 334.639 581.76 304.42 599.28 274.2 cv
@
485.76 453.48 mo
468.18 423.759 450.6 394.039 450.6 364.079 cv
450.6 334.119 468.18 303.919 485.76 273.72 cv
@
254.4 162.96 mo
254.4 225.199 li
@
369.24 162.96 mo
369.24 225.199 li
@
484.32 162.96 mo
484.32 225.199 li
@
599.16 162.96 mo
599.16 225.199 li
@
164.16 250.44 mo
229.513 250.57 li
@
164.16 364.56 mo
229.513 364.69 li
@
164.16 477.48 mo
229.513 477.61 li
@
164.88 591.24 mo
230.233 591.37 li
@
624 250.56 mo
689.083 251.484 li
@
624 364.68 mo
689.083 365.604 li
@
624 477.6 mo
689.083 478.524 li
@
624.6 591.36 mo
689.683 592.284 li
@
599.76 616.68 mo
599.76 678.919 li
@
484.92 616.68 mo
484.92 678.919 li
@
369.84 616.68 mo
369.84 678.919 li
@
255.12 616.68 mo
255.12 678.919 li
@
716.52 227.76 mo
622.241 204.262 527.962 180.765 431.862 180.601 cv
335.762 180.437 237.841 203.607 139.92 226.778 cv
@
716.52 341.04 mo
622.241 317.602 527.962 294.164 431.862 294.001 cv
335.762 293.838 237.841 316.949 139.92 340.06 cv
@
716.52 454.2 mo
622.241 430.762 527.962 407.324 431.862 407.161 cv
335.762 406.997 237.841 430.109 139.92 453.22 cv
@
716.52 567.6 mo
622.241 544.102 527.962 520.605 431.862 520.441 cv
335.762 520.277 237.841 543.447 139.92 566.618 cv
@
622.32 711.12 mo
645.818 616.841 669.315 522.562 669.479 426.462 cv
669.643 330.362 646.473 232.441 623.302 134.52 cv
@
507.36 711.12 mo
530.798 616.841 554.236 522.562 554.399 426.462 cv
554.562 330.362 531.451 232.441 508.34 134.52 cv
@
392.64 711.12 mo
416.078 616.841 439.516 522.562 439.679 426.462 cv
439.843 330.362 416.731 232.441 393.62 134.52 cv
@
277.68 711.12 mo
301.118 616.841 324.556 522.562 324.719 426.462 cv
324.883 330.362 301.771 232.441 278.66 134.52 cv
@
227.16 75.48 mo
281.64 75.48 li
281.64 99.12 li
227.16 99.12 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
0 lj
8 ml
227.16 75.48 mo
281.64 75.48 li
281.64 99.12 li
227.16 99.12 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [16.2 0 0 -16.2 0 0 ]msf
233.767 92.7405 mo
(DMA0)
[9.95985 13.8023 9.36029 0 ]xsh
341.88 75.72 mo
396.36 75.72 li
396.36 99.36 li
341.88 99.36 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
341.88 75.72 mo
396.36 75.72 li
396.36 99.36 li
341.88 99.36 li
cp
.750271 .679713 .654902 .901946 cmyk
@
%ADOBeginSubsetFont: VPLAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal EDTSBW+Calibri gcheck setglobal} if
3 5610 1005 <000100ae0000039f0517002e010cb0852b584024241e01241d01241c0123
1b01241a01241901261801261701291201291101122010014d30b8ffc040
0d0f024d60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29
b8fff0b30d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e
18200b014d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8
ffc0b310014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b01
4da01101111312b8013fb323522910b80107b10654003fed323ffdcd012f
5d2b2b2b2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d
5d5d5d5d5d5d5d1bb313402312b8013fb56c2352290610b80107b26c0654
00183f2b323f2b1acd30315925140e022321222e0235343e023321110706
06262635343e0237253e0333321e02151133321e02039f060a0d07fd5c07
0c0b0606090d08010efa13170e0503060b09012a040c12181218201206ea
080e090544131a100707101a13121a110903d8950a040d1e171118100c06
bf0304040104070b06fb8f09111a>EDTSBW+Calibri AddT42Char 
EDTSBW+Calibri /CharStrings get begin
/one 1005 def
end
EDTSBW+Calibri /Encoding get
dup 49 /one put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/EDTSBW+Calibri*1 
[48{/.notdef}rp /zero /one 15{/.notdef}rp /A 2{/.notdef}rp /D 8{/.notdef}rp 
/M 178{/.notdef}rp]
EDTSBW+Calibri nf
EDTSBW+Calibri*1 [16.2 0 0 -16.2 0 0 ]msf
348.428 92.9549 mo
(DMA1)
[9.95984 13.8023 9.36029 0 ]xsh
456.96 75 mo
511.56 75 li
511.56 98.64 li
456.96 98.64 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
456.96 75 mo
511.56 75 li
511.56 98.64 li
456.96 98.64 li
cp
.750271 .679713 .654902 .901946 cmyk
@
%ADOBeginSubsetFont: VPLAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal EDTSBW+Calibri gcheck setglobal} if
3 6014 1006 <000100720000039c0521003e00cab0852b58400d2936012b1e01291d0126
1e0140b8ffc040170f024d604001161810014d16100c0d014c16200b014d
16b8022db633253325330039b8ffe8b310014d39ba027f000bffc0b30c01
4d0bb8ffe0400b0f014d0b1138392020391bb8012eb63316062e531039b8
0128b10654003fed323f123939ed11392f123939012f2b2be12bcd39392f
2f10e12b2b2b31305d2b005d015d5d5d1bb71138392020392e1bb8012e40
096c3316062e53100639b80128b26c065400183f2b323f1239392b11392f
12393930315925140e022321222e0235343e0237133e0335342e0223220e
0223222e0235343e0633321e0215140e02070721321e02039c05090f09fd
350e150f07030a0f0cfb576939121c3550343d6149310c070b0704020508
183b596b3b5e8d5d2e1647866fcd0233080f0b054a121c130907101e1614
1e17170d010a5c9278622b2b4d3a2222282208121e150f16100e15242318
355c7a453e7b8faf72d609121b00>EDTSBW+Calibri AddT42Char 
EDTSBW+Calibri /CharStrings get begin
/two 1006 def
end
EDTSBW+Calibri /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/EDTSBW+Calibri*1 
[48{/.notdef}rp /zero /one /two 14{/.notdef}rp /A 2{/.notdef}rp /D 
8{/.notdef}rp /M 178{/.notdef}rp]
EDTSBW+Calibri nf
EDTSBW+Calibri*1 [16.2 0 0 -16.2 0 0 ]msf
463.6 92.2699 mo
(DMA2)
[9.95984 13.8023 9.36029 0 ]xsh
571.68 75.72 mo
626.16 75.72 li
626.16 99.36 li
571.68 99.36 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
571.68 75.72 mo
626.16 75.72 li
626.16 99.36 li
571.68 99.36 li
cp
.750271 .679713 .654902 .901946 cmyk
@
%ADOBeginSubsetFont: VPLAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal EDTSBW+Calibri gcheck setglobal} if
3 6388 1007 <00010067ffed0392052100580147b0852b58b9005affc0401c0f024d605a
01310810014d31100f014d31100c0d014c31200b014d31b80235400a4e53
264e4e1813014d40b8ffe840260f014d26200f014d40264e4e2640030e1b
0810014d1b100f014d1b100c0d014c1b200b014d1bb8fff8b30b014d1bb8
022db500080b014d00b8ffe8b40f024d000eb8ffe0b30f014d0eb8fff0b3
0f014d0eb8ffc040130c014d0e3b400f014d3b400c0d014c2f3b0111b8ff
c0b30f014d11b8ffc0400a0c0d014c3b113b111636b8010b400a49532cf3
202005495316b8010bb10556003fed3f12392fed3910ed1139392f2f2b2b
5d2b2b012f2b2b2bd42b2be12b2b2b2b2b1217392f2f2f2b2b2b11123910
e12b2b2b2b31305d2b1b400c0f3b010b033b113b11164936b8010b400d6c
53202cf36c20200549530516b8010bb26c055600183f2b3f12392f2b392b
1139392f2f5f5e5d30315901140e0223222e0635343633321e0233323e02
35342e022323222e0235343e023333323e0235342e0223220e0223222e02
35343e0633321e0215140e0207151e0303923e74aa6b4171583a0f080603
0e0d0935536f44426444222b53794d7b080f0b07060b0e0971426949271a
3451353a614c320a070b0703020608133a556f405a885b2d203e5a3b436f
502d0172598f6637151d1f0e0e141d15241c202520223e55323758402207
101a1513190f07224059372849361f232823050f1b160f17110e13242318
2e5475473d6951390b020735506b>EDTSBW+Calibri AddT42Char 
EDTSBW+Calibri /CharStrings get begin
/three 1007 def
end
EDTSBW+Calibri /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/EDTSBW+Calibri*1 
[48{/.notdef}rp /zero /one /two /three 13{/.notdef}rp /A 2{/.notdef}rp 
/D 8{/.notdef}rp /M 178{/.notdef}rp]
EDTSBW+Calibri nf
EDTSBW+Calibri*1 [16.2 0 0 -16.2 0 0 ]msf
578.261 92.9549 mo
(DMA3)
[9.95984 13.8024 9.36023 0 ]xsh
1 lj
10 ml
254.4 99.12 mo
254.4 112.168 li
0 1 1 .00173953 cmyk
@
369.12 99.36 mo
369.29 112.193 li
@
484.2 98.64 mo
484.223 112.158 li
@
598.92 99.36 mo
599.113 112.193 li
@
776.52 278.76 mo
754.92 278.76 li
754.92 224.28 li
776.52 224.28 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
0 lj
8 ml
776.52 278.76 mo
754.92 278.76 li
754.92 224.28 li
776.52 224.28 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [0 16.2 16.2 0 0 0 ]msf
760.3 230.897 mo
(DMA0)
[9.95984 13.8024 9.36023 0 ]ysh
776.52 393 mo
754.92 393 li
754.92 338.52 li
776.52 338.52 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
776.52 393 mo
754.92 393 li
754.92 338.52 li
776.52 338.52 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [0 16.2 16.2 0 0 0 ]msf
760.301 345.108 mo
(DMA1)
[9.95984 13.8023 9.36029 0 ]ysh
777.12 505.8 mo
755.64 505.8 li
755.64 451.32 li
777.12 451.32 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
777.12 505.8 mo
755.64 505.8 li
755.64 451.32 li
777.12 451.32 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [0 16.2 16.2 0 0 0 ]msf
760.985 457.883 mo
(DMA2)
[9.95984 13.8023 9.36029 0 ]ysh
776.52 619.56 mo
754.92 619.56 li
754.92 564.96 li
776.52 564.96 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
776.52 619.56 mo
754.92 619.56 li
754.92 564.96 li
776.52 564.96 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [0 16.2 16.2 0 0 0 ]msf
760.301 571.612 mo
(DMA3)
[9.95984 13.8023 9.36029 0 ]ysh
1 lj
10 ml
754.974 251.58 mo
738.84 251.52 li
0 1 1 .00173953 cmyk
@
754.974 365.817 mo
738.84 365.64 li
@
755.658 478.56 mo
738.84 478.595 li
@
754.934 592.23 mo
739.44 592.2 li
@
78 563.76 mo
101.64 563.76 li
101.64 618.36 li
78 618.36 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
0 lj
8 ml
78 563.76 mo
101.64 563.76 li
101.64 618.36 li
78 618.36 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [0 -16.2 -16.2 0 0 0 ]msf
95.2069 611.718 mo
(DMA0)
[-9.9599 -13.8023 -9.36029 0 ]ysh
77.4 450.24 mo
101.16 450.24 li
101.16 504.84 li
77.4 504.84 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
77.4 450.24 mo
101.16 450.24 li
101.16 504.84 li
77.4 504.84 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [0 -16.2 -16.2 0 0 0 ]msf
94.6939 498.183 mo
(DMA1)
[-9.95984 -13.8023 -9.36029 0 ]ysh
77.64 337.2 mo
101.28 337.2 li
101.28 391.68 li
77.64 391.68 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
77.64 337.2 mo
101.28 337.2 li
101.28 391.68 li
77.64 391.68 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [0 -16.2 -16.2 0 0 0 ]msf
94.9096 385.115 mo
(DMA2)
[-9.95984 -13.8023 -9.36029 0 ]ysh
78 223.08 mo
101.64 223.08 li
101.64 277.68 li
78 277.68 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
78 223.08 mo
101.64 223.08 li
101.64 277.68 li
78 277.68 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [0 -16.2 -16.2 0 0 0 ]msf
95.2069 271.054 mo
(DMA3)
[-9.95984 -13.8024 -9.36023 0 ]ysh
1 lj
10 ml
101.64 591 mo
115.1 591.13 li
0 1 1 .00173953 cmyk
@
101.16 477.48 mo
114.494 477.48 li
@
101.28 364.44 mo
114.398 364.522 li
@
101.64 250.44 mo
114.461 250.489 li
@
227.76 747.72 mo
282.36 747.72 li
282.36 771.36 li
227.76 771.36 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
0 lj
8 ml
227.76 747.72 mo
282.36 747.72 li
282.36 771.36 li
227.76 771.36 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [16.2 0 0 -16.2 0 0 ]msf
234.406 764.926 mo
(DMA0)
[9.95985 13.8023 9.36029 0 ]xsh
342.48 747.24 mo
396.96 747.24 li
396.96 770.88 li
342.48 770.88 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
342.48 747.24 mo
396.96 747.24 li
396.96 770.88 li
342.48 770.88 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [16.2 0 0 -16.2 0 0 ]msf
349.022 764.437 mo
(DMA1)
[9.95984 13.8023 9.36029 0 ]xsh
457.56 747.12 mo
512.04 747.12 li
512.04 770.76 li
457.56 770.76 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
457.56 747.12 mo
512.04 747.12 li
512.04 770.76 li
457.56 770.76 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [16.2 0 0 -16.2 0 0 ]msf
464.164 764.331 mo
(DMA2)
[9.95984 13.8023 9.36029 0 ]xsh
572.28 746.4 mo
626.76 746.4 li
626.76 770.04 li
572.28 770.04 li
cp
.0390936 .0300603 .0300603 0 cmyk
ef
572.28 746.4 mo
626.76 746.4 li
626.76 770.04 li
572.28 770.04 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [16.2 0 0 -16.2 0 0 ]msf
578.888 763.631 mo
(DMA3)
[9.95984 13.8024 9.36023 0 ]xsh
1 lj
10 ml
255.12 729.72 mo
255.12 747.72 li
0 1 1 .00173953 cmyk
@
369.935 729.72 mo
369.72 747.231 li
@
484.898 729.72 mo
484.8 747.124 li
@
599.725 729.72 mo
599.52 746.424 li
@
212.88 213.84 mo
236.794 232.642 li
@
328.08 213.36 mo
351.674 232.573 li
@
443.16 213.36 mo
466.696 232.653 li
@
558 213.72 mo
581.577 232.646 li
@
212.88 328.2 mo
236.794 346.761 li
@
328.08 327.72 mo
351.674 346.692 li
@
443.16 327.72 mo
466.696 346.773 li
@
558 328.08 mo
581.577 346.766 li
@
213.36 441 mo
236.789 459.663 li
@
328.56 440.64 mo
351.67 459.714 li
@
443.64 440.52 mo
466.691 459.675 li
@
558.48 440.88 mo
581.573 459.668 li
@
213.24 555 mo
237.528 573.431 li
@
328.32 554.52 mo
352.289 573.362 li
@
443.4 554.4 mo
467.31 573.322 li
@
558.24 554.76 mo
582.192 573.315 li
@
230.04 136.44 mo
221.948 126.818 213.857 117.196 212.076 105.876 cv
210.296 94.556 214.828 81.538 219.359 68.52 cv
@
345.24 136.44 mo
337.148 126.818 329.057 117.196 327.276 105.876 cv
325.496 94.556 330.028 81.538 334.559 68.52 cv
@
459.84 136.32 mo
451.748 126.698 443.657 117.076 441.876 105.756 cv
440.096 94.436 444.628 81.418 449.159 68.4 cv
@
575.4 134.88 mo
567.308 125.241 559.217 115.602 557.436 104.262 cv
555.656 92.9219 560.188 79.8809 564.719 66.8399 cv
@
230.52 708.12 mo
222.428 717.742 214.337 727.364 212.556 738.684 cv
210.776 750.004 215.308 763.022 219.839 776.04 cv
@
345.72 708.12 mo
337.628 717.742 329.537 727.364 327.756 738.684 cv
325.976 750.004 330.508 763.022 335.039 776.04 cv
@
460.32 708.24 mo
452.228 717.862 444.137 727.484 442.356 738.804 cv
440.576 750.124 445.108 763.142 449.639 776.16 cv
@
575.88 709.68 mo
567.788 719.302 559.697 728.924 557.916 740.244 cv
556.136 751.564 560.668 764.582 565.199 777.6 cv
@
716.16 617.76 mo
725.799 625.852 735.438 633.943 746.778 635.724 cv
758.118 637.504 771.159 632.972 784.2 628.441 cv
@
716.16 503.52 mo
725.799 511.612 735.438 519.703 746.778 521.484 cv
758.118 523.264 771.159 518.732 784.2 514.201 cv
@
716.28 390.36 mo
725.902 398.452 735.524 406.543 746.844 408.324 cv
758.164 410.104 771.182 405.572 784.2 401.041 cv
@
717.72 274.8 mo
727.359 282.892 736.998 290.983 748.338 292.764 cv
759.678 294.544 772.719 290.012 785.76 285.481 cv
@
138.84 617.16 mo
129.201 625.252 119.562 633.343 108.222 635.124 cv
96.882 636.904 83.841 632.372 70.8 627.841 cv
@
138.84 502.92 mo
129.201 511.012 119.562 519.103 108.222 520.884 cv
96.882 522.664 83.841 518.132 70.8 513.601 cv
@
138.72 389.76 mo
129.081 397.852 119.442 405.943 108.102 407.724 cv
96.762 409.504 83.721 404.972 70.68 400.441 cv
@
137.28 274.2 mo
127.641 282.292 118.002 290.383 106.662 292.164 cv
95.322 293.944 82.281 289.412 69.24 284.881 cv
@
229.56 250.62 mo
229.56 236.603 240.708 225.24 254.46 225.24 cv
268.212 225.24 279.36 236.603 279.36 250.62 cv
279.36 264.637 268.212 276 254.46 276 cv
240.708 276 229.56 264.637 229.56 250.62 cv
0 0 0 0 cmyk
ef
229.56 250.62 mo
229.56 236.603 240.708 225.24 254.46 225.24 cv
268.212 225.24 279.36 236.603 279.36 250.62 cv
279.36 264.637 268.212 276 254.46 276 cv
240.708 276 229.56 264.637 229.56 250.62 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
%ADOBeginSubsetFont: VPLAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal EDTSBW+Calibri gcheck setglobal} if
3 1366 90 <000200acfffa040b050e0036004400bdb0852b58401e102e1137080b014d
37100f014d37100c0d014c371810014d37180b014d37b80233b729401001
4d293f11b8fff0b310014d11b8fff0b30f014d11b8fff0b30d014d11b8ff
f6b30c014d11b8ffe8b30b014d11b80211b21c2e10b80108b67040014040
173db8010bb5215117550555003f3f3fed12392f5ded39012fe12b2b2b2b
2b32d42be12b2b2b2b2b12393931301bb22e4010b80108b56c404017213d
b8010bb66c21511755055500183f3f3f2b12392f2b3930315925140e0223
222e0227032e03232311140e0223222e023511343633213216171e031514
0e02071e031713161601342627262623231133323e02040b0614241e1a21
140b0477152d3e543b7309132119192114082917011331411a4b734e2723
425c3920342d2814740e08fefd4450193f3391a84463421f1a080c080404
09100c013134573f23fdd9080c070505070c0804ae271f05030d38566f43
41674f3a140e2b3c4e31fee3241d03854c69170706fe4c213b50>EDTSBW+Calibri AddT42Char 
EDTSBW+Calibri /CharStrings get begin
/R 90 def
end
EDTSBW+Calibri /Encoding get
dup 82 /R put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/EDTSBW+Calibri*1 
[48{/.notdef}rp /zero /one /two /three 13{/.notdef}rp /A 2{/.notdef}rp 
/D 8{/.notdef}rp /M 4{/.notdef}rp /R 173{/.notdef}rp]
EDTSBW+Calibri nf
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
248.027 254.683 mo
(R0)
[6.59933 0 ]xsh
344.4 250.62 mo
344.4 236.603 355.521 225.24 369.24 225.24 cv
382.959 225.24 394.08 236.603 394.08 250.62 cv
394.08 264.637 382.959 276 369.24 276 cv
355.521 276 344.4 264.637 344.4 250.62 cv
0 0 0 0 cmyk
ef
344.4 250.62 mo
344.4 236.603 355.521 225.24 369.24 225.24 cv
382.959 225.24 394.08 236.603 394.08 250.62 cv
394.08 264.637 382.959 276 369.24 276 cv
355.521 276 344.4 264.637 344.4 250.62 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
362.858 254.683 mo
(R1)
[6.59933 0 ]xsh
229.56 137.58 mo
229.56 123.563 240.708 112.2 254.46 112.2 cv
268.212 112.2 279.36 123.563 279.36 137.58 cv
279.36 151.597 268.212 162.96 254.46 162.96 cv
240.708 162.96 229.56 151.597 229.56 137.58 cv
0 0 0 0 cmyk
ef
229.56 137.58 mo
229.56 123.563 240.708 112.2 254.46 112.2 cv
268.212 112.2 279.36 123.563 279.36 137.58 cv
279.36 151.597 268.212 162.96 254.46 162.96 cv
240.708 162.96 229.56 151.597 229.56 137.58 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
%ADOBeginSubsetFont: VPLAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal EDTSBW+Calibri gcheck setglobal} if
3 4596 972 <00030052ffed03ba052100270037004701a4b0852b58b90036fff0b40f11
014c36b8fff0b40c0d014c35b8fff0b40f11014c35b8fff0b40c0d014c34
b8fff0b40f11014c34b8fff0b40c0d014c33b8fff0b311014d33b8fff0b3
0f014d49b8ffc0b60f024d60490130b8fff0b40c0d014c30b8fff0b40f10
014c30b8fff0b40c0d014c30b8ffe0b30b014d30b8021940191428100c0d
014c28100f10014c28100c0d014c28200b014d28b80218401a1e0f231e1e
180f014d14180f014d141e141e0a38100c0d014c38b8ffd040151d014d38
100f10014c38100c0d014c38200b014d38ba02430000ffd4b30f024d00b8
ffe0b30f014d00b8ffc0b314014d00b8ffc0b310014d00b8ffc0b30d014d
00b8ffc0b40b014d0042b8fff0400a0c0d014c42301d014d42b8fff0b40f
10014c42b8fff0b40c0d014c42b8ffe0b30b014d42b8024340110a400b01
4d0a353d052dfd195945fd055f003fed3fed123939012f2be12b2b2b2b2b
d42b2b2b2b2b2be12b2b2b2b2b1239392f2f2b2b12393910e12b2b2b2b10
e12b2b2b2b31305d2b002b2b2b2b2b2b2b2b1b400f353d05192dfd6c1959
0545fd6c055f00183f2b3f2b12393930315901140e0223222e0235343e02
372e0335343e0233321e0215140e02071e0303342e0223220615141e0217
363613342e02270e0315141633323603ba3c71a66b649e6e3a284b6e453c
5c402131639966628f5d2c21405d3c476f4b27d81d3853356c6f1b39573c
656c2a224567443f5f3d1f85848083014c54835a2e2a52784d3d66564b22
1f45515c36447758332f516e3f335e544920234a555f025f2a4430196255
27433c391f347efda22e4b413d211f3e42492c616a6b>EDTSBW+Calibri AddT42Char 
3 8162 1012 <ffff0052ffed03ba0521020603cc0000>EDTSBW+Calibri AddT42Char 
EDTSBW+Calibri /CharStrings get begin
/eight 1012 def
end
EDTSBW+Calibri /Encoding get
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/EDTSBW+Calibri*1 
[48{/.notdef}rp /zero /one /two /three 4{/.notdef}rp /eight 8{/.notdef}rp 
/A 2{/.notdef}rp /D 8{/.notdef}rp /M 4{/.notdef}rp /R 173{/.notdef}rp]
EDTSBW+Calibri nf
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
241.907 141.696 mo
(R128)
[6.59933 6.12064 6.12065 0 ]xsh
344.4 137.58 mo
344.4 123.563 355.521 112.2 369.24 112.2 cv
382.959 112.2 394.08 123.563 394.08 137.58 cv
394.08 151.597 382.959 162.96 369.24 162.96 cv
355.521 162.96 344.4 151.597 344.4 137.58 cv
0 0 0 0 cmyk
ef
344.4 137.58 mo
344.4 123.563 355.521 112.2 369.24 112.2 cv
382.959 112.2 394.08 123.563 394.08 137.58 cv
394.08 151.597 382.959 162.96 369.24 162.96 cv
355.521 162.96 344.4 151.597 344.4 137.58 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
%ADOBeginSubsetFont: VPLAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal EDTSBW+Calibri gcheck setglobal} if
3 8178 1013 <00020052ffed03a605210030004200e7b0852b584013292e012a05012904
012903012a2601260a0144b8ffc040200f024d60440131080d014d31100c
0d014c1d7a3101393149316931032b310131b8022c4009000e0e20007000
0200b8ffe0b30f024d00b8ffe0b40f014d003bb8fff8b30d014d3bb8fff0
40120c0d014c753b01363b463b663b03243b013bb8022b400e2f25012540
f220200736f42a5318b80108b10756003fed3fed12392fed012f5de15d5d
5d2b2bc42b2b5d392f10e15d5d5d322b2b31305d2b005d5d015d5d5d5d1b
400f2040f26c2020072a36f46c2a530718b80108b26c075600183f2b3f2b
12392f2b30315901140e0423222e0435343e0233321e0233323e02370606
23222e0235343e0233321e0407342e0223220e0215141e0233323603a614
30517ba9702b51412c140903060b080b283d5233618b582c023594606c93
5927326aa472517d5c402711af2242603f415c3b1c19385a424b8c02ba54
ac9f8b683b0b1012121f1a161a0e050f120f4b7ea65c1f303b668c53569b
7646294d6d8aa14680af6c302f4f64353b6244252d00>EDTSBW+Calibri AddT42Char 
EDTSBW+Calibri /CharStrings get begin
/nine 1013 def
end
EDTSBW+Calibri /Encoding get
dup 57 /nine put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/EDTSBW+Calibri*1 
[48{/.notdef}rp /zero /one /two /three 4{/.notdef}rp /eight /nine 
7{/.notdef}rp /A 2{/.notdef}rp /D 8{/.notdef}rp /M 4{/.notdef}rp /R 
173{/.notdef}rp]
EDTSBW+Calibri nf
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
356.738 141.696 mo
(R129)
[6.59933 6.12064 6.12067 0 ]xsh
459.36 250.62 mo
459.36 236.603 470.508 225.24 484.26 225.24 cv
498.012 225.24 509.16 236.603 509.16 250.62 cv
509.16 264.637 498.012 276 484.26 276 cv
470.508 276 459.36 264.637 459.36 250.62 cv
0 0 0 0 cmyk
ef
459.36 250.62 mo
459.36 236.603 470.508 225.24 484.26 225.24 cv
498.012 225.24 509.16 236.603 509.16 250.62 cv
509.16 264.637 498.012 276 484.26 276 cv
470.508 276 459.36 264.637 459.36 250.62 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
477.883 254.683 mo
(R2)
[6.59933 0 ]xsh
574.2 250.62 mo
574.2 236.603 585.348 225.24 599.1 225.24 cv
612.852 225.24 624 236.603 624 250.62 cv
624 264.637 612.852 276 599.1 276 cv
585.348 276 574.2 264.637 574.2 250.62 cv
0 0 0 0 cmyk
ef
574.2 250.62 mo
574.2 236.603 585.348 225.24 599.1 225.24 cv
612.852 225.24 624 236.603 624 250.62 cv
624 264.637 612.852 276 599.1 276 cv
585.348 276 574.2 264.637 574.2 250.62 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
592.714 254.683 mo
(R3)
[6.5993 0 ]xsh
459.36 137.58 mo
459.36 123.563 470.508 112.2 484.26 112.2 cv
498.012 112.2 509.16 123.563 509.16 137.58 cv
509.16 151.597 498.012 162.96 484.26 162.96 cv
470.508 162.96 459.36 151.597 459.36 137.58 cv
0 0 0 0 cmyk
ef
459.36 137.58 mo
459.36 123.563 470.508 112.2 484.26 112.2 cv
498.012 112.2 509.16 123.563 509.16 137.58 cv
509.16 151.597 498.012 162.96 484.26 162.96 cv
470.508 162.96 459.36 151.597 459.36 137.58 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
471.763 141.696 mo
(R130)
[6.59933 6.12064 6.12067 0 ]xsh
574.2 137.58 mo
574.2 123.563 585.348 112.2 599.1 112.2 cv
612.852 112.2 624 123.563 624 137.58 cv
624 151.597 612.852 162.96 599.1 162.96 cv
585.348 162.96 574.2 151.597 574.2 137.58 cv
0 0 0 0 cmyk
ef
574.2 137.58 mo
574.2 123.563 585.348 112.2 599.1 112.2 cv
612.852 112.2 624 123.563 624 137.58 cv
624 151.597 612.852 162.96 599.1 162.96 cv
585.348 162.96 574.2 151.597 574.2 137.58 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
586.594 141.696 mo
(R131)
[6.5993 6.12067 6.12067 0 ]xsh
229.56 477.66 mo
229.56 463.643 240.708 452.28 254.46 452.28 cv
268.212 452.28 279.36 463.643 279.36 477.66 cv
279.36 491.677 268.212 503.04 254.46 503.04 cv
240.708 503.04 229.56 491.677 229.56 477.66 cv
0 0 0 0 cmyk
ef
229.56 477.66 mo
229.56 463.643 240.708 452.28 254.46 452.28 cv
268.212 452.28 279.36 463.643 279.36 477.66 cv
279.36 491.677 268.212 503.04 254.46 503.04 cv
240.708 503.04 229.56 491.677 229.56 477.66 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
248.027 481.763 mo
(R8)
[6.59933 0 ]xsh
344.4 477.66 mo
344.4 463.643 355.521 452.28 369.24 452.28 cv
382.959 452.28 394.08 463.643 394.08 477.66 cv
394.08 491.677 382.959 503.04 369.24 503.04 cv
355.521 503.04 344.4 491.677 344.4 477.66 cv
0 0 0 0 cmyk
ef
344.4 477.66 mo
344.4 463.643 355.521 452.28 369.24 452.28 cv
382.959 452.28 394.08 463.643 394.08 477.66 cv
394.08 491.677 382.959 503.04 369.24 503.04 cv
355.521 503.04 344.4 491.677 344.4 477.66 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
362.858 481.763 mo
(R9)
[6.59933 0 ]xsh
229.56 364.62 mo
229.56 350.603 240.708 339.24 254.46 339.24 cv
268.212 339.24 279.36 350.603 279.36 364.62 cv
279.36 378.637 268.212 390 254.46 390 cv
240.708 390 229.56 378.637 229.56 364.62 cv
0 0 0 0 cmyk
ef
229.56 364.62 mo
229.56 350.603 240.708 339.24 254.46 339.24 cv
268.212 339.24 279.36 350.603 279.36 364.62 cv
279.36 378.637 268.212 390 254.46 390 cv
240.708 390 229.56 378.637 229.56 364.62 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
%ADOBeginSubsetFont: VPLAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal EDTSBW+Calibri gcheck setglobal} if
3 6942 1008 <00020030fffa03d30514002a002e0125b0852b58403a252e01262d01272c
01242701242601251c01261b01231a012419012518012517012616012615
01261401261001260f012405012404012b1b0130b8ffc040120f024d6030
012d16180f024d162010014d16b8ffe0b30f014d16b8ffe0b70c014d161c
2e2e10b8fffc401d0f024d101810014d10100f014d10100d014d100a0c01
4d10100b014d10bb021100270004ffd4b30f024d04b8ffd0b30c014d04b8
ffe0400a0b014d0404302f271b2eb8010b400a042b2110100a21520a5500
3f3f12392f123933ed3232111201392f2b2b2b33e12b2b2b2b2b2b321133
cd2b2b2b2b3231305d2b005d015d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d
5d1bb3271b102eb8010b400b6c042b2110100a21520a5500183f3f12392f
1239332b3232303159011406232311140e0223222e02351121222e023534
3e0237013e0333321e0215113332160123012103d3141292081420191820
1307fdea0c100d0502060a0701d205131e2c1e21311e10921115fea102fe
5b01a701702126fef0080b080404080b08011006101e18131e19170d0312
080c080305080d09fcc62302e9fd3a00>EDTSBW+Calibri AddT42Char 
EDTSBW+Calibri /CharStrings get begin
/four 1008 def
end
EDTSBW+Calibri /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/EDTSBW+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four 3{/.notdef}rp /eight 
/nine 7{/.notdef}rp /A 2{/.notdef}rp /D 8{/.notdef}rp /M 4{/.notdef}rp 
/R 173{/.notdef}rp]
EDTSBW+Calibri nf
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
248.027 368.777 mo
(R4)
[6.59933 0 ]xsh
344.4 364.62 mo
344.4 350.603 355.521 339.24 369.24 339.24 cv
382.959 339.24 394.08 350.603 394.08 364.62 cv
394.08 378.637 382.959 390 369.24 390 cv
355.521 390 344.4 378.637 344.4 364.62 cv
0 0 0 0 cmyk
ef
344.4 364.62 mo
344.4 350.603 355.521 339.24 369.24 339.24 cv
382.959 339.24 394.08 350.603 394.08 364.62 cv
394.08 378.637 382.959 390 369.24 390 cv
355.521 390 344.4 378.637 344.4 364.62 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
%ADOBeginSubsetFont: VPLAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal EDTSBW+Calibri gcheck setglobal} if
3 7378 1009 <00010065ffed0396050e003e00fcb0852b58400d27370127360126080126
030140b8ffc0b60f024d60400137b8ffe8b310014d37b8fff0b40b0d014c
37ba02110028ffc0402810014d28400f014d280e4f326f327f3203321d18
10014d1d100f014d1d100c0d014c1d200b014d1dba02330000ffe8b30f02
4d00b8ffc0b50f014d004013b8ffc0b70f10014c13131836b8012c400c2c
3af42022012222052c5118b8010bb10556003fed3f12392f5ded10ed1139
2f2b0110d62b2be12b2b2b2bc45dd4d42b2be12b2b31305d2b005d5d015d
5d1bb41313182c36b8012c40116c223af46c0022010b032222052c510518
b8010bb26c055600183f2b3f12392f5f5e5d2b2b11392f30315901140e02
23222e0635343e0233321e0233323e0235342e0223220623222635113436
3321321e02151406232111363633321e0203964680b16c3c6c54360f0605
0203080b070a2a4769484370512e27517c563d58261c181f1d023d080f0a
051412fe1d2349306fa66f3901a068a26f3a1119180e0c111a12111b1108
191d1a2044674a3e5f3f1f0c1a25020f212009121c132428fe9505023561
8a00>EDTSBW+Calibri AddT42Char 
EDTSBW+Calibri /CharStrings get begin
/five 1009 def
end
EDTSBW+Calibri /Encoding get
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/EDTSBW+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /five 2{/.notdef}rp 
/eight /nine 7{/.notdef}rp /A 2{/.notdef}rp /D 8{/.notdef}rp /M 
4{/.notdef}rp /R 173{/.notdef}rp]
EDTSBW+Calibri nf
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
362.858 368.777 mo
(R5)
[6.59933 0 ]xsh
459.36 477.66 mo
459.36 463.643 470.508 452.28 484.26 452.28 cv
498.012 452.28 509.16 463.643 509.16 477.66 cv
509.16 491.677 498.012 503.04 484.26 503.04 cv
470.508 503.04 459.36 491.677 459.36 477.66 cv
0 0 0 0 cmyk
ef
459.36 477.66 mo
459.36 463.643 470.508 452.28 484.26 452.28 cv
498.012 452.28 509.16 463.643 509.16 477.66 cv
509.16 491.677 498.012 503.04 484.26 503.04 cv
470.508 503.04 459.36 491.677 459.36 477.66 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
474.88 481.763 mo
(R10)
[6.59933 6.12064 0 ]xsh
574.2 477.66 mo
574.2 463.643 585.348 452.28 599.1 452.28 cv
612.852 452.28 624 463.643 624 477.66 cv
624 491.677 612.852 503.04 599.1 503.04 cv
585.348 503.04 574.2 491.677 574.2 477.66 cv
0 0 0 0 cmyk
ef
574.2 477.66 mo
574.2 463.643 585.348 452.28 599.1 452.28 cv
612.852 452.28 624 463.643 624 477.66 cv
624 491.677 612.852 503.04 599.1 503.04 cv
585.348 503.04 574.2 491.677 574.2 477.66 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
589.711 481.763 mo
(R11)
[6.5993 6.12067 0 ]xsh
459.36 364.62 mo
459.36 350.603 470.508 339.24 484.26 339.24 cv
498.012 339.24 509.16 350.603 509.16 364.62 cv
509.16 378.637 498.012 390 484.26 390 cv
470.508 390 459.36 378.637 459.36 364.62 cv
0 0 0 0 cmyk
ef
459.36 364.62 mo
459.36 350.603 470.508 339.24 484.26 339.24 cv
498.012 339.24 509.16 350.603 509.16 364.62 cv
509.16 378.637 498.012 390 484.26 390 cv
470.508 390 459.36 378.637 459.36 364.62 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
%ADOBeginSubsetFont: VPLAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal EDTSBW+Calibri gcheck setglobal} if
3 4204 970 <0002006bffed03bd05200034004800c6b0852b58b9004affc040170f024d
604a012b753f01663f01433f01343f01243f013fb8024340140c1c1c0c7a
35016a35014b35013a35012b350135b80243b670000120000100b8ffe0b3
0f014d00b8ffe8b70f024d00300c010cb8fffa400a0f024d0c3aff303005
26b80100b2135944b80115b1055f003fed3fed12392fed012f2b5dd42b2b
5d5de15d5d5d5d5d12392f10e15d5d5d5d5d3231305d2b1b4009303aff6c
3030051326b80100b46c13590544b80115b26c055f00183f2b3f2b12392f
2b30315901140e0223222e0435343e0433321e0615140e0223222e022322
0e02073e0333321e0207342e0223220e0207141e0233323e0203bd346ca6
71517c5c3d2510122e4f77a66e254c402c0e07040201070b090b26364d33
5d865529031a414d563169905926ae17365a42254a453f1a213f5e3f405e
3e1d01a3559f7949284a6c8aa45e53aa9e8b673c090f120b0d0f130e121a
10080e110e4c80a95c0f1e180f396589603a5f42240d171f1281ae692d30
5165>EDTSBW+Calibri AddT42Char 
3 7800 1010 <ffff006bffed03bd0520020603ca0000>EDTSBW+Calibri AddT42Char 
EDTSBW+Calibri /CharStrings get begin
/six 1010 def
end
EDTSBW+Calibri /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/EDTSBW+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/.notdef /eight /nine 7{/.notdef}rp /A 2{/.notdef}rp /D 8{/.notdef}rp 
/M 4{/.notdef}rp /R 173{/.notdef}rp]
EDTSBW+Calibri nf
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
477.883 368.777 mo
(R6)
[6.59933 0 ]xsh
574.2 364.62 mo
574.2 350.603 585.348 339.24 599.1 339.24 cv
612.852 339.24 624 350.603 624 364.62 cv
624 378.637 612.852 390 599.1 390 cv
585.348 390 574.2 378.637 574.2 364.62 cv
0 0 0 0 cmyk
ef
574.2 364.62 mo
574.2 350.603 585.348 339.24 599.1 339.24 cv
612.852 339.24 624 350.603 624 364.62 cv
624 378.637 612.852 390 599.1 390 cv
585.348 390 574.2 378.637 574.2 364.62 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
%ADOBeginSubsetFont: VPLAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal EDTSBW+Calibri gcheck setglobal} if
3 7816 1011 <00010063fffa03af050e001f00f2b0852b58b90011ffe8400a1121014c11
1010014d11b8ffe8b30f014d11b8fff0b30d014d11b8ffe8b30c014d11b8
fff8400a0b014d74110126110110b8ffe8400a1121014c101010014d10b8
ffe8b30f014d10b8fff0b30d014d10b8ffe8400b0b0c014c751001261001
06b8fff0b30b014d21b8ffc0b60f024d60210100b8ffc0b310014d00b8ff
d8b40b014d0015b8ffc0b30c014d15b8ffe8b30b014d15b8ffe8b30f014d
15b8ffe0b50f024d150511b8012db31a510b55003f3fed32012f2b2b2b2b
cd2b2b31305d2b2b5d5d2b2b2b2b2b5d5d2b2b2b2b2b2b1bb2051a11b801
2db46c1a510b5500183f3f2b3230315901140e0207010e03232226263637
0121222635343e023321321e0203af03050906fe2e050f17241a22261102
0601eafd931313050a0e0902f20e150b0604c4121d1b190efbce0c0f0903
060d130d044a2824131c130906121c00>EDTSBW+Calibri AddT42Char 
EDTSBW+Calibri /CharStrings get begin
/seven 1011 def
end
EDTSBW+Calibri /Encoding get
dup 55 /seven put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/EDTSBW+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine 7{/.notdef}rp /A 2{/.notdef}rp /D 8{/.notdef}rp 
/M 4{/.notdef}rp /R 173{/.notdef}rp]
EDTSBW+Calibri nf
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
592.714 368.777 mo
(R7)
[6.5993 0 ]xsh
230.16 704.34 mo
230.16 690.323 241.308 678.96 255.06 678.96 cv
268.812 678.96 279.96 690.323 279.96 704.34 cv
279.96 718.357 268.812 729.72 255.06 729.72 cv
241.308 729.72 230.16 718.357 230.16 704.34 cv
0 0 0 0 cmyk
ef
230.16 704.34 mo
230.16 690.323 241.308 678.96 255.06 678.96 cv
268.812 678.96 279.96 690.323 279.96 704.34 cv
279.96 718.357 268.812 729.72 255.06 729.72 cv
241.308 729.72 230.16 718.357 230.16 704.34 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
242.546 708.414 mo
(R192)
[6.59933 6.12064 6.12065 0 ]xsh
345 704.34 mo
345 690.323 356.148 678.96 369.9 678.96 cv
383.652 678.96 394.8 690.323 394.8 704.34 cv
394.8 718.357 383.652 729.72 369.9 729.72 cv
356.148 729.72 345 718.357 345 704.34 cv
0 0 0 0 cmyk
ef
345 704.34 mo
345 690.323 356.148 678.96 369.9 678.96 cv
383.652 678.96 394.8 690.323 394.8 704.34 cv
394.8 718.357 383.652 729.72 369.9 729.72 cv
356.148 729.72 345 718.357 345 704.34 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
357.378 708.414 mo
(R193)
[6.59933 6.12064 6.12067 0 ]xsh
230.16 591.3 mo
230.16 577.283 241.308 565.92 255.06 565.92 cv
268.812 565.92 279.96 577.283 279.96 591.3 cv
279.96 605.317 268.812 616.68 255.06 616.68 cv
241.308 616.68 230.16 605.317 230.16 591.3 cv
0 0 0 0 cmyk
ef
230.16 591.3 mo
230.16 577.283 241.308 565.92 255.06 565.92 cv
268.812 565.92 279.96 577.283 279.96 591.3 cv
279.96 605.317 268.812 616.68 255.06 616.68 cv
241.308 616.68 230.16 605.317 230.16 591.3 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
245.664 595.428 mo
(R12)
[6.59933 6.12065 0 ]xsh
345 591.3 mo
345 577.283 356.148 565.92 369.9 565.92 cv
383.652 565.92 394.8 577.283 394.8 591.3 cv
394.8 605.317 383.652 616.68 369.9 616.68 cv
356.148 616.68 345 605.317 345 591.3 cv
0 0 0 0 cmyk
ef
345 591.3 mo
345 577.283 356.148 565.92 369.9 565.92 cv
383.652 565.92 394.8 577.283 394.8 591.3 cv
394.8 605.317 383.652 616.68 369.9 616.68 cv
356.148 616.68 345 605.317 345 591.3 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
360.495 595.428 mo
(R13)
[6.59933 6.12064 0 ]xsh
460.08 704.34 mo
460.08 690.323 471.201 678.96 484.92 678.96 cv
498.639 678.96 509.76 690.323 509.76 704.34 cv
509.76 718.357 498.639 729.72 484.92 729.72 cv
471.201 729.72 460.08 718.357 460.08 704.34 cv
0 0 0 0 cmyk
ef
460.08 704.34 mo
460.08 690.323 471.201 678.96 484.92 678.96 cv
498.639 678.96 509.76 690.323 509.76 704.34 cv
509.76 718.357 498.639 729.72 484.92 729.72 cv
471.201 729.72 460.08 718.357 460.08 704.34 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
472.402 708.414 mo
(R194)
[6.59933 6.12064 6.12067 0 ]xsh
574.92 704.34 mo
574.92 690.323 586.041 678.96 599.76 678.96 cv
613.479 678.96 624.6 690.323 624.6 704.34 cv
624.6 718.357 613.479 729.72 599.76 729.72 cv
586.041 729.72 574.92 718.357 574.92 704.34 cv
0 0 0 0 cmyk
ef
574.92 704.34 mo
574.92 690.323 586.041 678.96 599.76 678.96 cv
613.479 678.96 624.6 690.323 624.6 704.34 cv
624.6 718.357 613.479 729.72 599.76 729.72 cv
586.041 729.72 574.92 718.357 574.92 704.34 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
587.234 708.414 mo
(R195)
[6.5993 6.12067 6.12067 0 ]xsh
460.08 591.3 mo
460.08 577.283 471.201 565.92 484.92 565.92 cv
498.639 565.92 509.76 577.283 509.76 591.3 cv
509.76 605.317 498.639 616.68 484.92 616.68 cv
471.201 616.68 460.08 605.317 460.08 591.3 cv
0 0 0 0 cmyk
ef
460.08 591.3 mo
460.08 577.283 471.201 565.92 484.92 565.92 cv
498.639 565.92 509.76 577.283 509.76 591.3 cv
509.76 605.317 498.639 616.68 484.92 616.68 cv
471.201 616.68 460.08 605.317 460.08 591.3 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
475.52 595.428 mo
(R14)
[6.59933 6.12064 0 ]xsh
574.92 591.3 mo
574.92 577.283 586.041 565.92 599.76 565.92 cv
613.479 565.92 624.6 577.283 624.6 591.3 cv
624.6 605.317 613.479 616.68 599.76 616.68 cv
586.041 616.68 574.92 605.317 574.92 591.3 cv
0 0 0 0 cmyk
ef
574.92 591.3 mo
574.92 577.283 586.041 565.92 599.76 565.92 cv
613.479 565.92 624.6 577.283 624.6 591.3 cv
624.6 605.317 613.479 616.68 599.76 616.68 cv
586.041 616.68 574.92 605.317 574.92 591.3 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
590.351 595.428 mo
(R15)
[6.5993 6.12067 0 ]xsh
114.48 250.44 mo
114.48 236.456 125.601 225.12 139.32 225.12 cv
153.039 225.12 164.16 236.456 164.16 250.44 cv
164.16 264.424 153.039 275.76 139.32 275.76 cv
125.601 275.76 114.48 264.424 114.48 250.44 cv
0 0 0 0 cmyk
ef
114.48 250.44 mo
114.48 236.456 125.601 225.12 139.32 225.12 cv
153.039 225.12 164.16 236.456 164.16 250.44 cv
164.16 264.424 153.039 275.76 139.32 275.76 cv
125.601 275.76 114.48 264.424 114.48 250.44 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
126.805 254.553 mo
(R160)
[6.59933 6.12064 6.12065 0 ]xsh
114.48 477.54 mo
114.48 463.523 125.601 452.16 139.32 452.16 cv
153.039 452.16 164.16 463.523 164.16 477.54 cv
164.16 491.557 153.039 502.92 139.32 502.92 cv
125.601 502.92 114.48 491.557 114.48 477.54 cv
0 0 0 0 cmyk
ef
114.48 477.54 mo
114.48 463.523 125.601 452.16 139.32 452.16 cv
153.039 452.16 164.16 463.523 164.16 477.54 cv
164.16 491.557 153.039 502.92 139.32 502.92 cv
125.601 502.92 114.48 491.557 114.48 477.54 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
126.805 481.633 mo
(R162)
[6.59933 6.12064 6.12065 0 ]xsh
114.48 364.5 mo
114.48 350.483 125.601 339.12 139.32 339.12 cv
153.039 339.12 164.16 350.483 164.16 364.5 cv
164.16 378.517 153.039 389.88 139.32 389.88 cv
125.601 389.88 114.48 378.517 114.48 364.5 cv
0 0 0 0 cmyk
ef
114.48 364.5 mo
114.48 350.483 125.601 339.12 139.32 339.12 cv
153.039 339.12 164.16 350.483 164.16 364.5 cv
164.16 378.517 153.039 389.88 139.32 389.88 cv
125.601 389.88 114.48 378.517 114.48 364.5 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
126.805 368.647 mo
(R161)
[6.59933 6.12064 6.12065 0 ]xsh
115.08 591.18 mo
115.08 577.163 126.228 565.8 139.98 565.8 cv
153.732 565.8 164.88 577.163 164.88 591.18 cv
164.88 605.197 153.732 616.56 139.98 616.56 cv
126.228 616.56 115.08 605.197 115.08 591.18 cv
0 0 0 0 cmyk
ef
115.08 591.18 mo
115.08 577.163 126.228 565.8 139.98 565.8 cv
153.732 565.8 164.88 577.163 164.88 591.18 cv
164.88 605.197 153.732 616.56 139.98 616.56 cv
126.228 616.56 115.08 605.197 115.08 591.18 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
127.445 595.298 mo
(R163)
[6.59933 6.12065 6.12065 0 ]xsh
689.04 251.46 mo
689.04 237.443 700.188 226.08 713.94 226.08 cv
727.692 226.08 738.84 237.443 738.84 251.46 cv
738.84 265.477 727.692 276.84 713.94 276.84 cv
700.188 276.84 689.04 265.477 689.04 251.46 cv
0 0 0 0 cmyk
ef
689.04 251.46 mo
689.04 237.443 700.188 226.08 713.94 226.08 cv
727.692 226.08 738.84 237.443 738.84 251.46 cv
738.84 265.477 727.692 276.84 713.94 276.84 cv
700.188 276.84 689.04 265.477 689.04 251.46 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
701.425 255.607 mo
(R224)
[6.5993 6.12067 6.12067 0 ]xsh
689.04 478.62 mo
689.04 464.603 700.188 453.24 713.94 453.24 cv
727.692 453.24 738.84 464.603 738.84 478.62 cv
738.84 492.637 727.692 504 713.94 504 cv
700.188 504 689.04 492.637 689.04 478.62 cv
0 0 0 0 cmyk
ef
689.04 478.62 mo
689.04 464.603 700.188 453.24 713.94 453.24 cv
727.692 453.24 738.84 464.603 738.84 478.62 cv
738.84 492.637 727.692 504 713.94 504 cv
700.188 504 689.04 492.637 689.04 478.62 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
701.425 482.688 mo
(R226)
[6.5993 6.12067 6.12067 0 ]xsh
689.04 365.58 mo
689.04 351.563 700.188 340.2 713.94 340.2 cv
727.692 340.2 738.84 351.563 738.84 365.58 cv
738.84 379.597 727.692 390.96 713.94 390.96 cv
700.188 390.96 689.04 379.597 689.04 365.58 cv
0 0 0 0 cmyk
ef
689.04 365.58 mo
689.04 351.563 700.188 340.2 713.94 340.2 cv
727.692 340.2 738.84 351.563 738.84 365.58 cv
738.84 379.597 727.692 390.96 713.94 390.96 cv
700.188 390.96 689.04 379.597 689.04 365.58 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
701.425 369.701 mo
(R225)
[6.5993 6.12067 6.12067 0 ]xsh
689.76 592.26 mo
689.76 578.243 700.881 566.88 714.6 566.88 cv
728.319 566.88 739.44 578.243 739.44 592.26 cv
739.44 606.277 728.319 617.64 714.6 617.64 cv
700.881 617.64 689.76 606.277 689.76 592.26 cv
0 0 0 0 cmyk
ef
689.76 592.26 mo
689.76 578.243 700.881 566.88 714.6 566.88 cv
728.319 566.88 739.44 578.243 739.44 592.26 cv
739.44 606.277 728.319 617.64 714.6 617.64 cv
700.881 617.64 689.76 606.277 689.76 592.26 cv
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [12.12 0 0 -12.12 0 0 ]msf
702.065 596.352 mo
(R227)
[6.5993 6.12067 6.12067 0 ]xsh
0 lj
8 ml
195.6 38.04 mo
669.48 38.04 li
669.48 106.08 li
195.6 106.08 li
cp
@
210.6 44.76 mo
654.48 44.76 li
654.48 68.4 li
210.6 68.4 li
cp
0 0 0 0 cmyk
ef
210.6 44.76 mo
654.48 44.76 li
654.48 68.4 li
210.6 68.4 li
cp
.750271 .679713 .654902 .901946 cmyk
@
%ADOBeginSubsetFont: VPLAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal EDTSBW+Calibri gcheck setglobal} if
3 1752 258 <0002005cffed033f03ca0033004000f6b0852b5840200f421f422f42030b
0917340c0c014d34100d014d34180b014d34100f10014c34b801f7400e00
27270f00010c00100f014d003ab8fff0b30c014d3ab8ffe8b30d014d3ab8
ffe8b30b014d3ab8ffe8b40f10014c3ab8020840141117c500341034023b
c0340100340134342e412ab8011b400fd022012222041dea2e4a3ddc0c4d
04002f3fed3fed12392f5ded1112392f5d715e5ded012fe12b2b2b2bc42b
5e5d392f10e12b2b2b2b323931305e5d1b400d0b17013417c56c34342e41
222ab8011b40166c00220116042222042e1dea6c2e4a0c3ddc6c0c4d0400
182f3f2b3f2b12392f5f5e5d2b1112392f2b5d3031592514060623222626
3535060623222e0235343e02333335342e0223220e0223222e0235343e04
33321e02150723220e0215141633323637033f101c1b1a1f0e3b91514773
512d3e74a8697c16314e393d6149310c080c0904071b4256663461885426
a48d4464421f5950416f3d180c0c06060c0c5a3f46254666414c704a2546
3450351b1d231d0810190f191d1a231d132c557e54c4172d3f2946534244
>EDTSBW+Calibri AddT42Char 
3 2172 286 <0002005dffed039903ca002b003400eab0852b58402a2f363f366f360313
200d014d13200f014d1313212c100c014d2c180b014d2c100d014d2c100f
10014c2cb801f9b5442ba42b022bb8fff0b50f014d2b3404b8ffe0b30d01
4d04b8ffeeb30c014d04b8ffe0b30b014d04b8ffe8b40f10014c04b8020a
4021212cc78004900402c00401d0040104041c2fdc264a18ea600e700e02
0e09ea1c4d003ffdd45ded3fed12392f5d7172ed012fe12b2b2b2b32dd2b
5de12b2b2b2b12392f2b2b31305d1b4022042cc76c76040104041c262fdc
6c264a0e18ea6c000e100e020f030e1c09ea6c1c4d00183f2bc45f5e5d2b
3f2b12392f5d2b3031590114062321141e0233323e0233321e0215140e06
23222e0235343e0233321e021527362623220e020703992719fdb21e4670
514064492f0c070b06030203070b365671406fa7723a3c71a0636a95602d
a60379773d5c3e2202020227214b78562e151a15070e19120d130f0c0b19
18133e7ab87a74b9814544739b581382942e4c653700>EDTSBW+Calibri AddT42Char 
3 2554 349 <00020085fffa0151052f0015002100a7b0852b58b73f234f236f230316b8
ffe8b30d014d16b8fff6b30c014d16b8ffe8b313014d16b8ffe0b310014d
16b8fff0b30f014d16b8ffe8b30b014d16bb0271001c0015fff0b30d014d
15b8fff6b30c014d15b8ffe8b30b014d15b8fff0b40f10014c15b801f8b6
0a1f400f014d1fb8013eb4191049054c003f3fd6ed2b012fe12b2b2b2bd4
e12b2b2b2b2b2b31305d1bb1191fb8013eb56c191049054c00183f3fc62b
30315925140e0223222e023511343e0233321e0215131406232226353436
333216013e08122019182013070713201819201208132c3b3a2b2c3b3a2b
19080b080404080b080384070c080404080c0701303a2a29393a2a29>EDTSBW+Calibri AddT42Char 
3 2822 364 <00010099fffa037c0571003400b3b0852b58400c3f360129310131401201
4d31b8ffd0b40f10014c31b8ffe0b30d014d31b8ffeab30c014d31b8ffe0
b30b014d31bb02270022000cfff0b40f10014c0cb8fff0b30d014d0cb8ff
f6b30c014d0cb8ffe8b30b014d0cb801f8401a162d2d00400f014d00400c
014d0016220b0528491c46114c054c003f3f3f3f123939012fc42b2b392f
10f12b2b2b2b32e02b2b2b2b2b31305d5d1b400b220b0528491c46114c05
4c00183f3f3f3f12393930315925140e0223222e02270111140e0223222e
023511343e0233321e021511013e0333321e021514060701011616037c08
13221a1b23180f06fe840812201918201307071320181920120801540812
192218192215090d0ffeba016e0d0b1a080c080403070d0901f2fe0d080b
080404080b080538080c080404080c08fcd201760a0d090303070b090c18
10febafe25111500>EDTSBW+Calibri AddT42Char 
3 3160 367 <00010099fffa013e057100150051b0852b58b73f174f176f170300b8fff0
b30d014d00b8fff6b30c014d00b8ffe8b30b014d00b8fff0b40f10014c00
b801f8b40a1046054c003f3f012fe12b2b2b2b31305d1bb31046054c0018
3f3f30315925140e0223222e023511343e0233321e0215013e0812201918
201307071320181920120819080b080404080b080538080c080404080c08
>EDTSBW+Calibri AddT42Char 
3 3310 374 <00010099fffa03a003ca003200b8b0852b58400f12100b014d13100b014d
3f34012a13b8fff0b310014d13b8fff0b30f014d13b8fff0b30d014d13b8
fff6b30c014d13b8ffe8b30b014d13b801f8401b1e0b1010014d0b100d01
4d0b100f014d0b0a0c014d0b180b014d0bb801f8b700400c014d001e10b8
0106400a2d4a2a192449194c054c003f3f3f12393fed012f2f2be12b2b2b
2b2b10e12b2b2b2b2b3931305d002b2b1bb12d10b80106400b6c2d4a2a19
2449194c054c00183f3f3f12393f2b30315925140e0223222e023511342e
022322060711140e0223222e023511343e0233321e021515363633321e02
1503a00812201819201208182e49303e7c44081220191820130706121c17
161d10074c974d5a7b4c2119080b080404080b08020f4d5e44245855fd8b
080b080404080b080384080b090303090b0877554f3d66896000>EDTSBW+Calibri AddT42Char 
3 3636 396 <00010099fffa02a703ca00330086b0852b58b4703501260fb8fff6b30c01
4d0fb8ffe8b30b014d0fb8fff0b40f10014c0fb8fff0b30d014d0fb801f8
4012004013014d004011014d00200d014d001a0ab8012540092b4a260f15
2049154c003f3f1239393fed012fc42b2b2be12b2b2b2b3931305d1bb12b
0ab80125400a6c2b4a260f152049154c00183f3f1239393f2b3031590114
0e0223222e0223220e020711140e0223222e023511343e0233321e021515
3e0333321e0602a70206090808171d24151930353a230812201918201307
06121c17161d100725413a391d0d21241d0c0403010362161e1109090908
142e4c37fdb0080b080404080b080384080b090303090b08833644270f03
080a0a090e1b>EDTSBW+Calibri AddT42Char 
3 3912 410 <00010021ffef026d04ad003a0089b0852b58b4290011232db8fff0b30f01
4d2db8fff0b30d014d2db8fff6b30c014d2db8ffe8b310014d2db8ffe8b3
0b014d2db801f8400c170d2ded23481d0ded174831b80104b1074d003fed
3fedcd3fed012f33e12b2b2b2b2b32cdc43231301b4011232ded6c23481d
1740170ded6c17480731b80104b26c074d00183f2b3f2b1a10cd3f2b3031
5925140e0423222e02351123222635343e02333335343e0233321e021515
33321e02151406232311141633323e0233321e02026d081020292e174664
401d7e0f1205080d087d0713201819201208e7080c0904120fe737471724
1c1408050905045b1d22100e0906254b734e020e2024131a1107d6070c09
0404090c07d607111a132420fe0a5d5f090a09050e18>EDTSBW+Calibri AddT42Char 
EDTSBW+Calibri /CharStrings get begin
/a 258 def
/e 286 def
/i 349 def
/k 364 def
/l 367 def
/n 374 def
/r 396 def
/t 410 def
end
EDTSBW+Calibri /Encoding get
dup 97 /a put
dup 101 /e put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 110 /n put
dup 114 /r put
dup 116 /t put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/EDTSBW+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine 7{/.notdef}rp /A 2{/.notdef}rp /D 8{/.notdef}rp 
/M 4{/.notdef}rp /R 14{/.notdef}rp /a 3{/.notdef}rp /e 3{/.notdef}rp 
/i /.notdef /k /l /.notdef /n 3{/.notdef}rp /r 
/.notdef /t 139{/.notdef}rp]
EDTSBW+Calibri nf
EDTSBW+Calibri*1 [16.2 0 0 -16.2 0 0 ]msf
399.14 61.9517 mo
(interlaken)
[3.71957 8.52112 5.39957 8.04007 5.63922 3.72119 7.79874 7.32083 8.04007 0 ]xsh
39.96 185.88 mo
107.88 185.88 li
107.88 659.76 li
39.96 659.76 li
cp
@
46.56 200.88 mo
70.2 200.88 li
70.2 644.64 li
46.56 644.64 li
cp
0 0 0 0 cmyk
ef
46.56 200.88 mo
70.2 200.88 li
70.2 644.64 li
46.56 644.64 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [0 -16.2 -16.2 0 0 0 ]msf
63.8293 456.134 mo
(interlaken)
[-3.71957 -8.52112 -5.39957 -8.04007 -5.63922 -3.72119 -7.79874 -7.32083 -8.04007 0 ]ysh
815.4 659.76 mo
747.36 659.76 li
747.36 185.88 li
815.4 185.88 li
cp
@
808.68 644.64 mo
785.04 644.64 li
785.04 200.88 li
808.68 200.88 li
cp
0 0 0 0 cmyk
ef
808.68 644.64 mo
785.04 644.64 li
785.04 200.88 li
808.68 200.88 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [0 16.2 16.2 0 0 0 ]msf
791.449 389.409 mo
(interlaken)
[3.71957 8.52112 5.39957 8.04007 5.63922 3.72119 7.79874 7.32083 8.04007 0 ]ysh
669.24 806.52 mo
195.36 806.52 li
195.36 738.6 li
669.24 738.6 li
cp
@
210.36 776.28 mo
654.24 776.28 li
654.24 799.92 li
210.36 799.92 li
cp
0 0 0 0 cmyk
ef
210.36 776.28 mo
654.24 776.28 li
654.24 799.92 li
210.36 799.92 li
cp
.750271 .679713 .654902 .901946 cmyk
@
EDTSBW+Calibri*1 [16.2 0 0 -16.2 0 0 ]msf
398.914 793.498 mo
(interlaken)
[3.71957 8.52112 5.39957 8.04007 5.63919 3.72122 7.79874 7.3208 8.0401 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/EDTSBW+Calibri*1 uf
/EDTSBW+Calibri uf
/VPLAAA+Calibri uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
